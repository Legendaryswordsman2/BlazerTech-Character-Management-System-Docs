### YamlMime:ManagedReference
items:
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2
  commentId: T:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2
  id: CharacterTemplateBaseSO`2
  parent: BlazerTech.CharacterManagement.Characters
  children:
  - BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterDisplayName
  - BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterName
  - BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterType
  - BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CreateNewCharacter
  - BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.GetOrCreateCharacter
  - BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.IsValid
  - BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.PerformValidationCheck
  - BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.isValid
  langs:
  - csharp
  - vb
  name: CharacterTemplateBaseSO<TCharacterType, TCharacter>
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>
  type: Class
  source:
    remote:
      path: Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
      branch: main
      repo: https://github.com/Legendaryswordsman2/BlazerTech-Character-Management-System.git
    id: CharacterTemplateBaseSO
    path: ../../../Unity/Unity Projects/BlazerTech Character Management System/Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
    startLine: 11
  assemblies:
  - Assembly-CSharp
  namespace: BlazerTech.CharacterManagement.Characters
  summary: Base class for all Character Templates.
  example: []
  syntax:
    content: 'public abstract class CharacterTemplateBaseSO<TCharacterType, TCharacter> : ScriptableObject, IValidatable where TCharacterType : CharacterTypeBaseSO'
    typeParameters:
    - id: TCharacterType
      description: ''
    - id: TCharacter
      description: ''
    content.vb: Public MustInherit Class CharacterTemplateBaseSO(Of TCharacterType As CharacterTypeBaseSO, TCharacter) Inherits ScriptableObject Implements IValidatable
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.ScriptableObject
  derivedClasses:
  - BlazerTech.CharacterManagement.Characters.LayeredCharacterTemplateSO
  - BlazerTech.CharacterManagement.Characters.UnifiedCharacterTemplateSO
  implements:
  - BlazerTech.CharacterManagement.Core.IValidatable
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter)
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter)
  name.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter)
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterType
  commentId: P:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterType
  id: CharacterType
  parent: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2
  langs:
  - csharp
  - vb
  name: CharacterType
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterType
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterType
  type: Property
  source:
    remote:
      path: Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
      branch: main
      repo: https://github.com/Legendaryswordsman2/BlazerTech-Character-Management-System.git
    id: CharacterType
    path: ../../../Unity/Unity Projects/BlazerTech Character Management System/Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
    startLine: 16
  assemblies:
  - Assembly-CSharp
  namespace: BlazerTech.CharacterManagement.Characters
  syntax:
    content: public TCharacterType CharacterType { get; }
    parameters: []
    return:
      type: '{TCharacterType}'
    content.vb: Public ReadOnly Property CharacterType As TCharacterType
  overload: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterType*
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterType
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterType
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterName
  commentId: P:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterName
  id: CharacterName
  parent: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2
  langs:
  - csharp
  - vb
  name: CharacterName
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterName
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterName
  type: Property
  source:
    remote:
      path: Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
      branch: main
      repo: https://github.com/Legendaryswordsman2/BlazerTech-Character-Management-System.git
    id: CharacterName
    path: ../../../Unity/Unity Projects/BlazerTech Character Management System/Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
    startLine: 24
  assemblies:
  - Assembly-CSharp
  namespace: BlazerTech.CharacterManagement.Characters
  syntax:
    content: public string CharacterName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property CharacterName As String
  overload: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterName*
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterName
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterName
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterDisplayName
  commentId: P:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterDisplayName
  id: CharacterDisplayName
  parent: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2
  langs:
  - csharp
  - vb
  name: CharacterDisplayName
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterDisplayName
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterDisplayName
  type: Property
  source:
    remote:
      path: Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
      branch: main
      repo: https://github.com/Legendaryswordsman2/BlazerTech-Character-Management-System.git
    id: CharacterDisplayName
    path: ../../../Unity/Unity Projects/BlazerTech Character Management System/Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
    startLine: 25
  assemblies:
  - Assembly-CSharp
  namespace: BlazerTech.CharacterManagement.Characters
  syntax:
    content: public string CharacterDisplayName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property CharacterDisplayName As String
  overload: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterDisplayName*
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterDisplayName
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterDisplayName
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.isValid
  commentId: F:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.isValid
  id: isValid
  parent: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2
  langs:
  - csharp
  - vb
  name: isValid
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.isValid
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.isValid
  type: Field
  source:
    remote:
      path: Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
      branch: main
      repo: https://github.com/Legendaryswordsman2/BlazerTech-Character-Management-System.git
    id: isValid
    path: ../../../Unity/Unity Projects/BlazerTech Character Management System/Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
    startLine: 33
  assemblies:
  - Assembly-CSharp
  namespace: BlazerTech.CharacterManagement.Characters
  syntax:
    content: protected bool isValid
    return:
      type: System.Boolean
    content.vb: Protected isValid As Boolean
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).isValid
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).isValid
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.IsValid
  commentId: P:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.IsValid
  id: IsValid
  parent: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.IsValid
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.IsValid
  type: Property
  source:
    remote:
      path: Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
      branch: main
      repo: https://github.com/Legendaryswordsman2/BlazerTech-Character-Management-System.git
    id: IsValid
    path: ../../../Unity/Unity Projects/BlazerTech Character Management System/Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
    startLine: 39
  assemblies:
  - Assembly-CSharp
  namespace: BlazerTech.CharacterManagement.Characters
  summary: >-
    Gets a value indicating whether the object is currently valid.  

    This value should be updated when <xref href="BlazerTech.CharacterManagement.Core.IValidatable.PerformValidationCheck" data-throw-if-not-resolved="false"></xref> is called.
  example: []
  syntax:
    content: public bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.IsValid*
  implements:
  - BlazerTech.CharacterManagement.Core.IValidatable.IsValid
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).IsValid
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).IsValid
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.GetOrCreateCharacter
  commentId: M:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.GetOrCreateCharacter
  id: GetOrCreateCharacter
  parent: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2
  langs:
  - csharp
  - vb
  name: GetOrCreateCharacter()
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.GetOrCreateCharacter()
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.GetOrCreateCharacter()
  type: Method
  source:
    remote:
      path: Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
      branch: main
      repo: https://github.com/Legendaryswordsman2/BlazerTech-Character-Management-System.git
    id: GetOrCreateCharacter
    path: ../../../Unity/Unity Projects/BlazerTech Character Management System/Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
    startLine: 59
  assemblies:
  - Assembly-CSharp
  namespace: BlazerTech.CharacterManagement.Characters
  summary: Create a new character or return the already creted one if it exists.
  example: []
  syntax:
    content: public TCharacter GetOrCreateCharacter()
    return:
      type: '{TCharacter}'
    content.vb: Public Function GetOrCreateCharacter() As TCharacter
  overload: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.GetOrCreateCharacter*
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).GetOrCreateCharacter()
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).GetOrCreateCharacter()
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CreateNewCharacter
  commentId: M:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CreateNewCharacter
  id: CreateNewCharacter
  parent: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2
  langs:
  - csharp
  - vb
  name: CreateNewCharacter()
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.CreateNewCharacter()
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.CreateNewCharacter()
  type: Method
  source:
    remote:
      path: Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
      branch: main
      repo: https://github.com/Legendaryswordsman2/BlazerTech-Character-Management-System.git
    id: CreateNewCharacter
    path: ../../../Unity/Unity Projects/BlazerTech Character Management System/Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
    startLine: 76
  assemblies:
  - Assembly-CSharp
  namespace: BlazerTech.CharacterManagement.Characters
  syntax:
    content: protected abstract TCharacter CreateNewCharacter()
    return:
      type: '{TCharacter}'
    content.vb: Protected MustOverride Function CreateNewCharacter() As TCharacter
  overload: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CreateNewCharacter*
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CreateNewCharacter()
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CreateNewCharacter()
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.PerformValidationCheck
  commentId: M:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.PerformValidationCheck
  id: PerformValidationCheck
  parent: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2
  langs:
  - csharp
  - vb
  name: PerformValidationCheck()
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.PerformValidationCheck()
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.PerformValidationCheck()
  type: Method
  source:
    remote:
      path: Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
      branch: main
      repo: https://github.com/Legendaryswordsman2/BlazerTech-Character-Management-System.git
    id: PerformValidationCheck
    path: ../../../Unity/Unity Projects/BlazerTech Character Management System/Assets/BlazerTech Character Management System/Scripts/Scriptable Objects/Character Templates/CharacterTemplateBaseSO.cs
    startLine: 78
  assemblies:
  - Assembly-CSharp
  namespace: BlazerTech.CharacterManagement.Characters
  summary: Checks/Rechecks if the object is valid and updates <xref href="BlazerTech.CharacterManagement.Core.IValidatable.IsValid" data-throw-if-not-resolved="false"></xref> accordingly.
  example: []
  syntax:
    content: public virtual bool PerformValidationCheck()
    return:
      type: System.Boolean
      description: true if the object is valid after the check; otherwise, false.
    content.vb: Public Overridable Function PerformValidationCheck() As Boolean
  overload: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.PerformValidationCheck*
  implements:
  - BlazerTech.CharacterManagement.Core.IValidatable.PerformValidationCheck
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).PerformValidationCheck()
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).PerformValidationCheck()
references:
- uid: BlazerTech.CharacterManagement.Characters
  commentId: N:BlazerTech.CharacterManagement.Characters
  href: BlazerTech.html
  name: BlazerTech.CharacterManagement.Characters
  nameWithType: BlazerTech.CharacterManagement.Characters
  fullName: BlazerTech.CharacterManagement.Characters
  spec.csharp:
  - uid: BlazerTech
    name: BlazerTech
    href: BlazerTech.html
  - name: .
  - uid: BlazerTech.CharacterManagement
    name: CharacterManagement
    href: BlazerTech.CharacterManagement.html
  - name: .
  - uid: BlazerTech.CharacterManagement.Characters
    name: Characters
    href: BlazerTech.CharacterManagement.Characters.html
  spec.vb:
  - uid: BlazerTech
    name: BlazerTech
    href: BlazerTech.html
  - name: .
  - uid: BlazerTech.CharacterManagement
    name: CharacterManagement
    href: BlazerTech.CharacterManagement.html
  - name: .
  - uid: BlazerTech.CharacterManagement.Characters
    name: Characters
    href: BlazerTech.CharacterManagement.Characters.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.ScriptableObject
  commentId: T:UnityEngine.ScriptableObject
  parent: UnityEngine
  isExternal: true
  name: ScriptableObject
  nameWithType: ScriptableObject
  fullName: UnityEngine.ScriptableObject
- uid: BlazerTech.CharacterManagement.Core.IValidatable
  commentId: T:BlazerTech.CharacterManagement.Core.IValidatable
  parent: BlazerTech.CharacterManagement.Core
  href: BlazerTech.CharacterManagement.Core.IValidatable.html
  name: IValidatable
  nameWithType: IValidatable
  fullName: BlazerTech.CharacterManagement.Core.IValidatable
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: BlazerTech.CharacterManagement.Core
  commentId: N:BlazerTech.CharacterManagement.Core
  href: BlazerTech.html
  name: BlazerTech.CharacterManagement.Core
  nameWithType: BlazerTech.CharacterManagement.Core
  fullName: BlazerTech.CharacterManagement.Core
  spec.csharp:
  - uid: BlazerTech
    name: BlazerTech
    href: BlazerTech.html
  - name: .
  - uid: BlazerTech.CharacterManagement
    name: CharacterManagement
    href: BlazerTech.CharacterManagement.html
  - name: .
  - uid: BlazerTech.CharacterManagement.Core
    name: Core
    href: BlazerTech.CharacterManagement.Core.html
  spec.vb:
  - uid: BlazerTech
    name: BlazerTech
    href: BlazerTech.html
  - name: .
  - uid: BlazerTech.CharacterManagement
    name: CharacterManagement
    href: BlazerTech.CharacterManagement.html
  - name: .
  - uid: BlazerTech.CharacterManagement.Core
    name: Core
    href: BlazerTech.CharacterManagement.Core.html
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterType*
  commentId: Overload:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterType
  href: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO-2.html#BlazerTech_CharacterManagement_Characters_CharacterTemplateBaseSO_2_CharacterType
  name: CharacterType
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterType
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterType
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterType
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterType
- uid: '{TCharacterType}'
  commentId: '!:TCharacterType'
  definition: TCharacterType
  name: TCharacterType
  nameWithType: TCharacterType
  fullName: TCharacterType
- uid: TCharacterType
  name: TCharacterType
  nameWithType: TCharacterType
  fullName: TCharacterType
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterName*
  commentId: Overload:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterName
  href: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO-2.html#BlazerTech_CharacterManagement_Characters_CharacterTemplateBaseSO_2_CharacterName
  name: CharacterName
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterName
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterName
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterName
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterDisplayName*
  commentId: Overload:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CharacterDisplayName
  href: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO-2.html#BlazerTech_CharacterManagement_Characters_CharacterTemplateBaseSO_2_CharacterDisplayName
  name: CharacterDisplayName
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterDisplayName
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.CharacterDisplayName
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterDisplayName
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CharacterDisplayName
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: BlazerTech.CharacterManagement.Core.IValidatable.PerformValidationCheck
  commentId: M:BlazerTech.CharacterManagement.Core.IValidatable.PerformValidationCheck
  parent: BlazerTech.CharacterManagement.Core.IValidatable
  href: BlazerTech.CharacterManagement.Core.IValidatable.html#BlazerTech_CharacterManagement_Core_IValidatable_PerformValidationCheck
  name: PerformValidationCheck()
  nameWithType: IValidatable.PerformValidationCheck()
  fullName: BlazerTech.CharacterManagement.Core.IValidatable.PerformValidationCheck()
  spec.csharp:
  - uid: BlazerTech.CharacterManagement.Core.IValidatable.PerformValidationCheck
    name: PerformValidationCheck
    href: BlazerTech.CharacterManagement.Core.IValidatable.html#BlazerTech_CharacterManagement_Core_IValidatable_PerformValidationCheck
  - name: (
  - name: )
  spec.vb:
  - uid: BlazerTech.CharacterManagement.Core.IValidatable.PerformValidationCheck
    name: PerformValidationCheck
    href: BlazerTech.CharacterManagement.Core.IValidatable.html#BlazerTech_CharacterManagement_Core_IValidatable_PerformValidationCheck
  - name: (
  - name: )
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.IsValid*
  commentId: Overload:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.IsValid
  href: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO-2.html#BlazerTech_CharacterManagement_Characters_CharacterTemplateBaseSO_2_IsValid
  name: IsValid
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.IsValid
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.IsValid
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).IsValid
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).IsValid
- uid: BlazerTech.CharacterManagement.Core.IValidatable.IsValid
  commentId: P:BlazerTech.CharacterManagement.Core.IValidatable.IsValid
  parent: BlazerTech.CharacterManagement.Core.IValidatable
  href: BlazerTech.CharacterManagement.Core.IValidatable.html#BlazerTech_CharacterManagement_Core_IValidatable_IsValid
  name: IsValid
  nameWithType: IValidatable.IsValid
  fullName: BlazerTech.CharacterManagement.Core.IValidatable.IsValid
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.GetOrCreateCharacter*
  commentId: Overload:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.GetOrCreateCharacter
  href: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO-2.html#BlazerTech_CharacterManagement_Characters_CharacterTemplateBaseSO_2_GetOrCreateCharacter
  name: GetOrCreateCharacter
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.GetOrCreateCharacter
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.GetOrCreateCharacter
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).GetOrCreateCharacter
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).GetOrCreateCharacter
- uid: '{TCharacter}'
  commentId: '!:TCharacter'
  definition: TCharacter
  name: TCharacter
  nameWithType: TCharacter
  fullName: TCharacter
- uid: TCharacter
  name: TCharacter
  nameWithType: TCharacter
  fullName: TCharacter
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CreateNewCharacter*
  commentId: Overload:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.CreateNewCharacter
  href: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO-2.html#BlazerTech_CharacterManagement_Characters_CharacterTemplateBaseSO_2_CreateNewCharacter
  name: CreateNewCharacter
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.CreateNewCharacter
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.CreateNewCharacter
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CreateNewCharacter
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).CreateNewCharacter
- uid: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.PerformValidationCheck*
  commentId: Overload:BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO`2.PerformValidationCheck
  href: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO-2.html#BlazerTech_CharacterManagement_Characters_CharacterTemplateBaseSO_2_PerformValidationCheck
  name: PerformValidationCheck
  nameWithType: CharacterTemplateBaseSO<TCharacterType, TCharacter>.PerformValidationCheck
  fullName: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO<TCharacterType, TCharacter>.PerformValidationCheck
  nameWithType.vb: CharacterTemplateBaseSO(Of TCharacterType, TCharacter).PerformValidationCheck
  fullName.vb: BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO(Of TCharacterType, TCharacter).PerformValidationCheck
