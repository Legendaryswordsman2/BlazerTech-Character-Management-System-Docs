{
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMAnimationPreviewButtonHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMAnimationPreviewButtonHandler.html",
    "title": "Class CCMAnimationPreviewButtonHandler | BlazerTech Character Management System",
    "summary": "Class CCMAnimationPreviewButtonHandler Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CCMAnimationPreviewButtonHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CCMAnimationPreviewButtonHandler Properties AnimationName public string AnimationName { get; } Property Value string Methods ChangeAlpha(float) public virtual void ChangeAlpha(float alpha) Parameters alpha float ChangeAnimation() public void ChangeAnimation() DisableInteractivity() public void DisableInteractivity() EnableInteractivity() public void EnableInteractivity() Hide() public void Hide() Setup(string, CCMCharacterPreviewHandler) public void Setup(string animationName, CCMCharacterPreviewHandler characterPreviewHandler) Parameters animationName string characterPreviewHandler CCMCharacterPreviewHandler Unhide() public void Unhide()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMAnimationPreviewSwitcherManager.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMAnimationPreviewSwitcherManager.html",
    "title": "Class CCMAnimationPreviewSwitcherManager | BlazerTech Character Management System",
    "summary": "Class CCMAnimationPreviewSwitcherManager Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CCMAnimationPreviewSwitcherManager : CCMBase Inheritance object Object Component Behaviour MonoBehaviour CCMBase CCMAnimationPreviewSwitcherManager Inherited Members CCMBase.referenceHandler CCMBase.characterCreationMenuManager CCMBase.coreReferencesSet CCMBase.CharacterCreationMenuDisabled() CCMBase.CharacterCreationMenuBeforeDisabled() CCMBase.GetCharacterCreationMenuManagerReference() CCMBase.GetCCReferenceHandler() Methods Awake() protected override void Awake() CharacterCreationMenuEnabled() Called after the Character Creation Menu is enabled. protected override void CharacterCreationMenuEnabled()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMBase.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMBase.html",
    "title": "Class CCMBase | BlazerTech Character Management System",
    "summary": "Class CCMBase Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll Base class for all classes part of the Character Creator Menu public abstract class CCMBase : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CCMBase Derived CCMAnimationPreviewSwitcherManager CCMCharacterLayerSelectionManager CCMCharacterPreviewHandler CCMControlledRandomizationHandler CCMDisplayNameInputFieldHandler CCMHistoryPanel CCMHistoryTracker CCMLoadingScreenHandler CCMSelectedLayerTabHandler CCMTimelineButtonHandler Fields characterCreationMenuManager protected CharacterCreationMenuManager characterCreationMenuManager Field Value CharacterCreationMenuManager coreReferencesSet protected bool coreReferencesSet Field Value bool referenceHandler protected CMSReferenceHandler referenceHandler Field Value CMSReferenceHandler Methods Awake() protected virtual void Awake() CharacterCreationMenuBeforeDisabled() Called right before the Character Creation menu is disabled. protected virtual void CharacterCreationMenuBeforeDisabled() CharacterCreationMenuDisabled() Called after the Character Creation Menu is disabled. protected virtual void CharacterCreationMenuDisabled() CharacterCreationMenuEnabled() Called after the Character Creation Menu is enabled. protected virtual void CharacterCreationMenuEnabled() GetCCReferenceHandler() protected CMSReferenceHandler GetCCReferenceHandler() Returns CMSReferenceHandler GetCharacterCreationMenuManagerReference() protected CharacterCreationMenuManager GetCharacterCreationMenuManagerReference() Returns CharacterCreationMenuManager"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMCharacterLayerSelectionManager.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMCharacterLayerSelectionManager.html",
    "title": "Class CCMCharacterLayerSelectionManager | BlazerTech Character Management System",
    "summary": "Class CCMCharacterLayerSelectionManager Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll [DisallowMultipleComponent] public class CCMCharacterLayerSelectionManager : CCMBase Inheritance object Object Component Behaviour MonoBehaviour CCMBase CCMCharacterLayerSelectionManager Inherited Members CCMBase.referenceHandler CCMBase.characterCreationMenuManager CCMBase.coreReferencesSet CCMBase.CharacterCreationMenuDisabled() CCMBase.CharacterCreationMenuBeforeDisabled() CCMBase.GetCharacterCreationMenuManagerReference() CCMBase.GetCCReferenceHandler() Properties InitializationMode public LayerSelectorInitializationMode InitializationMode { get; } Property Value LayerSelectorInitializationMode LayerOptionSelectors public List<CharacterLayerSelector> LayerOptionSelectors { get; } Property Value List<CharacterLayerSelector> LayerSelectorPrefab public CharacterLayerSelector LayerSelectorPrefab { get; } Property Value CharacterLayerSelector SelectedLayer public CharacterLayer SelectedLayer { get; set; } Property Value CharacterLayer Methods Awake() protected override void Awake() CharacterCreationMenuEnabled() Called after the Character Creation Menu is enabled. protected override void CharacterCreationMenuEnabled() Events OnSelectedCharacterLayerChanged public event EventHandler<CharacterLayer> OnSelectedCharacterLayerChanged Event Type EventHandler<CharacterLayer>"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMCharacterPreviewHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMCharacterPreviewHandler.html",
    "title": "Class CCMCharacterPreviewHandler | BlazerTech Character Management System",
    "summary": "Class CCMCharacterPreviewHandler Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CCMCharacterPreviewHandler : CCMBase Inheritance object Object Component Behaviour MonoBehaviour CCMBase CCMCharacterPreviewHandler Inherited Members CCMBase.referenceHandler CCMBase.characterCreationMenuManager CCMBase.coreReferencesSet CCMBase.CharacterCreationMenuBeforeDisabled() CCMBase.GetCharacterCreationMenuManagerReference() CCMBase.GetCCReferenceHandler() Properties CharacterAnimator public Animator CharacterAnimator { get; } Property Value Animator CharacterSprite public Image CharacterSprite { get; } Property Value Image DefaultDirection public FourDirectional DefaultDirection { get; } Property Value FourDirectional PreviewMode public CharacterPreviewMode PreviewMode { get; } Property Value CharacterPreviewMode Methods Awake() protected override void Awake() ChangePreviewAnimation(string) public bool ChangePreviewAnimation(string newAnimationName) Parameters newAnimationName string Returns bool CharacterCreationMenuDisabled() Called after the Character Creation Menu is disabled. protected override void CharacterCreationMenuDisabled() CharacterCreationMenuEnabled() Called after the Character Creation Menu is enabled. protected override void CharacterCreationMenuEnabled() GetActiveBlendTreeHash() public int GetActiveBlendTreeHash() Returns int RotateCharacterPreview(TwoDirectional) public void RotateCharacterPreview(TwoDirectional direction) Parameters direction TwoDirectional RotateCharacterPreview(bool) public void RotateCharacterPreview(bool rotateLeft) Parameters rotateLeft bool SetCharacterPreviewDirection(FourDirectional) public void SetCharacterPreviewDirection(FourDirectional direction) Parameters direction FourDirectional Events OnPreviewAnimationChanged public event EventHandler<string> OnPreviewAnimationChanged Event Type EventHandler<string>"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMControlledRandomizationHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMControlledRandomizationHandler.html",
    "title": "Class CCMControlledRandomizationHandler | BlazerTech Character Management System",
    "summary": "Class CCMControlledRandomizationHandler Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CCMControlledRandomizationHandler : CCMBase Inheritance object Object Component Behaviour MonoBehaviour CCMBase CCMControlledRandomizationHandler Inherited Members CCMBase.referenceHandler CCMBase.characterCreationMenuManager CCMBase.coreReferencesSet CCMBase.CharacterCreationMenuDisabled() CCMBase.CharacterCreationMenuBeforeDisabled() CCMBase.GetCharacterCreationMenuManagerReference() CCMBase.GetCCReferenceHandler() Methods Awake() protected override void Awake() CharacterCreationMenuEnabled() Called after the Character Creation Menu is enabled. protected override void CharacterCreationMenuEnabled() RandomizeCharacter() Randomize the selected layers for the character in the Character Creation Menu. public void RandomizeCharacter() ToggleRandomizationOptionsUI() public void ToggleRandomizationOptionsUI() UpdateRandomizationToggle(CharacterLayer, bool) public bool UpdateRandomizationToggle(CharacterLayer layer, bool randomizeLayer) Parameters layer CharacterLayer randomizeLayer bool Returns bool"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMDisplayNameInputFieldHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMDisplayNameInputFieldHandler.html",
    "title": "Class CCMDisplayNameInputFieldHandler | BlazerTech Character Management System",
    "summary": "Class CCMDisplayNameInputFieldHandler Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CCMDisplayNameInputFieldHandler : CCMBase Inheritance object Object Component Behaviour MonoBehaviour CCMBase CCMDisplayNameInputFieldHandler Inherited Members CCMBase.referenceHandler CCMBase.characterCreationMenuManager CCMBase.coreReferencesSet CCMBase.Awake() CCMBase.CharacterCreationMenuBeforeDisabled() CCMBase.GetCharacterCreationMenuManagerReference() CCMBase.GetCCReferenceHandler() Methods CharacterCreationMenuDisabled() Called after the Character Creation Menu is disabled. protected override void CharacterCreationMenuDisabled() CharacterCreationMenuEnabled() Called after the Character Creation Menu is enabled. protected override void CharacterCreationMenuEnabled() SetCharacterDisplayName(string) public void SetCharacterDisplayName(string displayName) Parameters displayName string"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMHistoryPanel.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMHistoryPanel.html",
    "title": "Class CCMHistoryPanel | BlazerTech Character Management System",
    "summary": "Class CCMHistoryPanel Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CCMHistoryPanel : CCMBase Inheritance object Object Component Behaviour MonoBehaviour CCMBase CCMHistoryPanel Inherited Members CCMBase.referenceHandler CCMBase.characterCreationMenuManager CCMBase.coreReferencesSet CCMBase.Awake() CCMBase.CharacterCreationMenuDisabled() CCMBase.GetCharacterCreationMenuManagerReference() CCMBase.GetCCReferenceHandler() Methods CharacterCreationMenuBeforeDisabled() Called right before the Character Creation menu is disabled. protected override void CharacterCreationMenuBeforeDisabled() CharacterCreationMenuEnabled() Called after the Character Creation Menu is enabled. protected override void CharacterCreationMenuEnabled() RebuildAll() Rebuild the entire history list. Returns all entries to the pool and sets them up again. public void RebuildAll()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMHistoryTracker.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMHistoryTracker.html",
    "title": "Class CCMHistoryTracker | BlazerTech Character Management System",
    "summary": "Class CCMHistoryTracker Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll Tracks all modifications made to the ActiveCharacterDraft in the Character Creator. public class CCMHistoryTracker : CCMBase Inheritance object Object Component Behaviour MonoBehaviour CCMBase CCMHistoryTracker Inherited Members CCMBase.referenceHandler CCMBase.characterCreationMenuManager CCMBase.coreReferencesSet CCMBase.Awake() CCMBase.CharacterCreationMenuDisabled() CCMBase.GetCharacterCreationMenuManagerReference() CCMBase.GetCCReferenceHandler() Properties CanRedo public bool CanRedo { get; } Property Value bool CanUndo public bool CanUndo { get; } Property Value bool Current public LayeredCharacterSnapshot Current { get; } Property Value LayeredCharacterSnapshot CurrentIndex public int CurrentIndex { get; } Property Value int MaxSnapshots public int MaxSnapshots { get; set; } Property Value int PreserveFirstSnapshot Prevent the first snapshot in the Snapshots list from being removed. public bool PreserveFirstSnapshot { get; } Property Value bool Snapshots public IReadOnlyList<LayeredCharacterSnapshot> Snapshots { get; } Property Value IReadOnlyList<LayeredCharacterSnapshot> Methods ApplySnapshot(LayeredCharacterSnapshot) public void ApplySnapshot(LayeredCharacterSnapshot snapshot) Parameters snapshot LayeredCharacterSnapshot CharacterCreationMenuBeforeDisabled() Called right before the Character Creation menu is disabled. protected override void CharacterCreationMenuBeforeDisabled() CharacterCreationMenuEnabled() Called after the Character Creation Menu is enabled. protected override void CharacterCreationMenuEnabled() CreateNewSnapshot(string, bool) Create a new snapshot of the LayeredCharacter currently being edited in the Character Creator. public void CreateNewSnapshot(string noteOverride = \"\", bool dedupe = true) Parameters noteOverride string dedupe bool Redo() Redo to the next snapshot, if available. public void Redo() ScheduleSnapshot() Shcedule a snapshot to be created on the next frame. public Task ScheduleSnapshot() Returns Task Undo() Undo to the previous snapshot, if available. public void Undo() Events OnBulkSnapshotsRemoved Called when multiple snapshots are removed from the Snapshots list at once. public event EventHandler<List<LayeredCharacterSnapshot>> OnBulkSnapshotsRemoved Event Type EventHandler<List<LayeredCharacterSnapshot>> Remarks Most often called when the BlazerTech.CharacterManagement.CharacterCreator.CCMHistoryTracker.snapshots list is truncated. OnCursorChanged Called when the selected LayeredCharacterSnapshot in the Snapshots list is changed. public event EventHandler OnCursorChanged Event Type EventHandler OnHistoryChanged Called when a snapshot is added to or removed from the Snapshots list. public event EventHandler OnHistoryChanged Event Type EventHandler OnSnapshotAdded Called when a new snapshot is added to the Snapshots list. public event EventHandler<LayeredCharacterSnapshot> OnSnapshotAdded Event Type EventHandler<LayeredCharacterSnapshot> OnSnapshotRemoved Called when a snapshot is removed from the Snapshots list. public event EventHandler<LayeredCharacterSnapshot> OnSnapshotRemoved Event Type EventHandler<LayeredCharacterSnapshot>"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMLayerRandomizeToggle.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMLayerRandomizeToggle.html",
    "title": "Class CCMLayerRandomizeToggle | BlazerTech Character Management System",
    "summary": "Class CCMLayerRandomizeToggle Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CCMLayerRandomizeToggle : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CCMLayerRandomizeToggle Methods Setup(CharacterLayer, CCMControlledRandomizationHandler) public void Setup(CharacterLayer layer, CCMControlledRandomizationHandler controlledRandomizationHandler) Parameters layer CharacterLayer controlledRandomizationHandler CCMControlledRandomizationHandler UpdateRandomizationToggle(bool) public void UpdateRandomizationToggle(bool value) Parameters value bool"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMLoadingScreenHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMLoadingScreenHandler.html",
    "title": "Class CCMLoadingScreenHandler | BlazerTech Character Management System",
    "summary": "Class CCMLoadingScreenHandler Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CCMLoadingScreenHandler : CCMBase, ILoadingScreen Inheritance object Object Component Behaviour MonoBehaviour CCMBase CCMLoadingScreenHandler Implements ILoadingScreen Inherited Members CCMBase.referenceHandler CCMBase.characterCreationMenuManager CCMBase.coreReferencesSet CCMBase.Awake() CCMBase.CharacterCreationMenuEnabled() CCMBase.CharacterCreationMenuDisabled() CCMBase.CharacterCreationMenuBeforeDisabled() CCMBase.GetCharacterCreationMenuManagerReference() CCMBase.GetCCReferenceHandler() Events OnLoadingFinished public event EventHandler OnLoadingFinished Event Type EventHandler OnLoadingProgressUpdated public event EventHandler<float> OnLoadingProgressUpdated Event Type EventHandler<float>"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMRelay.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMRelay.html",
    "title": "Class CCMRelay | BlazerTech Character Management System",
    "summary": "Class CCMRelay Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll Used to relay method calls to the CharacterCreationMenuManager. [DisallowMultipleComponent] public class CCMRelay : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CCMRelay Remarks Mostly used to hookup buttons. Methods DisableMenu() Disable the Character Creation Menu. public void DisableMenu() OpenCharacterCreationMenu_PrimaryCharacter(LayeredCharacterTypeSO) Open the Character Creation Menu and use the PrimaryCharacterSlot for the LayeredCharacterTypeSO. public void OpenCharacterCreationMenu_PrimaryCharacter(LayeredCharacterTypeSO characterType) Parameters characterType LayeredCharacterTypeSO RandomizeEntireCharacter() Randomize all layers of the LayeredCharacter inside the ActiveCharacterDraft. public void RandomizeEntireCharacter() ResetCharacter() Call ResetCharacter() to reset the character to it's original state. public void ResetCharacter() SaveCharacter() Call the SaveCharacter() method in the CharacterCreationMenuManager to save any changes made in the Character Creation Menu. public void SaveCharacter()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMSelectedLayerTabHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMSelectedLayerTabHandler.html",
    "title": "Class CCMSelectedLayerTabHandler | BlazerTech Character Management System",
    "summary": "Class CCMSelectedLayerTabHandler Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CCMSelectedLayerTabHandler : CCMBase Inheritance object Object Component Behaviour MonoBehaviour CCMBase CCMSelectedLayerTabHandler Inherited Members CCMBase.referenceHandler CCMBase.characterCreationMenuManager CCMBase.coreReferencesSet CCMBase.Awake() CCMBase.CharacterCreationMenuDisabled() CCMBase.GetCharacterCreationMenuManagerReference() CCMBase.GetCCReferenceHandler() Methods CharacterCreationMenuBeforeDisabled() Called right before the Character Creation menu is disabled. protected override void CharacterCreationMenuBeforeDisabled() CharacterCreationMenuEnabled() Called after the Character Creation Menu is enabled. protected override void CharacterCreationMenuEnabled() RefreshLayerSelector() public void RefreshLayerSelector()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CCMTimelineButtonHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CCMTimelineButtonHandler.html",
    "title": "Class CCMTimelineButtonHandler | BlazerTech Character Management System",
    "summary": "Class CCMTimelineButtonHandler Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CCMTimelineButtonHandler : CCMBase Inheritance object Object Component Behaviour MonoBehaviour CCMBase CCMTimelineButtonHandler Inherited Members CCMBase.referenceHandler CCMBase.characterCreationMenuManager CCMBase.coreReferencesSet CCMBase.Awake() CCMBase.CharacterCreationMenuDisabled() CCMBase.GetCharacterCreationMenuManagerReference() CCMBase.GetCCReferenceHandler() Methods CharacterCreationMenuBeforeDisabled() Called right before the Character Creation menu is disabled. protected override void CharacterCreationMenuBeforeDisabled() CharacterCreationMenuEnabled() Called after the Character Creation Menu is enabled. protected override void CharacterCreationMenuEnabled() UndoOrRedo() Calls either Undo() or Redo() depending on the BlazerTech.CharacterManagement.CharacterCreator.CCMTimelineButtonHandler.mode. public void UndoOrRedo()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterCreationMenuEnablerRelay.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterCreationMenuEnablerRelay.html",
    "title": "Class CharacterCreationMenuEnablerRelay | BlazerTech Character Management System",
    "summary": "Class CharacterCreationMenuEnablerRelay Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CharacterCreationMenuEnablerRelay : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CharacterCreationMenuEnablerRelay Properties CharacterGroupName public string CharacterGroupName { get; } Property Value string CharacterName public string CharacterName { get; } Property Value string Methods EnableCharacterCreationMenu() public void EnableCharacterCreationMenu()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterCreationMenuManager.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterCreationMenuManager.html",
    "title": "Class CharacterCreationMenuManager | BlazerTech Character Management System",
    "summary": "Class CharacterCreationMenuManager Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll [DefaultExecutionOrder(-50)] [DisallowMultipleComponent] public class CharacterCreationMenuManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CharacterCreationMenuManager Fields OnCharacterSaved Invoked when the ActiveCharacterDraft is saved. [Space] [BoxGroup(\"Events\")] public UnityEvent<LayeredCharacter> OnCharacterSaved Field Value UnityEvent<LayeredCharacter> OnMenuDisabled [BoxGroup(\"Events\")] public UnityEvent OnMenuDisabled Field Value UnityEvent Properties ActiveCharacterDraft public CharacterDraft ActiveCharacterDraft { get; } Property Value CharacterDraft ActiveCharacterType The LayeredCharacterTypeSO being used when the Character Creation Menu is active. public LayeredCharacterTypeSO ActiveCharacterType { get; } Property Value LayeredCharacterTypeSO AutoEnableWithPrimaryCharacter Automatically enables the character creation menu in the start method with the SingleSlotCharacterGroup a part of the Character Type used. public bool AutoEnableWithPrimaryCharacter { get; } Property Value bool DefaultCharacterType The LayeredCharacterTypeSO that is assigned if ActiveCharacterType is null. public LayeredCharacterTypeSO DefaultCharacterType { get; } Property Value LayeredCharacterTypeSO EnabledAndSetup True if the Character Creation Menu is currently enabled and finished loading. public bool EnabledAndSetup { get; } Property Value bool Instance Property for accessing the single instance of CharacterCreationMenuManager. public static CharacterCreationMenuManager Instance { get; } Property Value CharacterCreationMenuManager MenuContents The root game object of the Character Creation Menu. Must be separate from the game object this script is attached to public GameObject MenuContents { get; } Property Value GameObject NewCharacterTemplate If assigned, the template will be used when creating a new character instead of creating a blank character. public LayeredCharacterTemplateSO NewCharacterTemplate { get; } Property Value LayeredCharacterTemplateSO Methods DisableMenu() Disable the Character Creation Menu. public void DisableMenu() EnableMenu_EditCharacter(LayeredCharacter, bool) Enable the Character Creation Menu to edit a pre existing character. public void EnableMenu_EditCharacter(LayeredCharacter character, bool enableMenuContents = true) Parameters character LayeredCharacter The character to be edited in the Character Creation Menu. enableMenuContents bool Optional bool. When not toggled the Character Creation Menu will not automatically open but will still be active and enabled. Remarks A copy of the character will be created and editable. When saved any changes made to the copy will be applied to the original character. Exceptions ArgumentNullException Thrown when the character is null. EnableMenu_NewCharacterInFlexibleGroup(string, FlexibleCharacterGroup, bool) Enable the Character Creation Menu to create a new character inside a FlexibleCharacterGroup. public void EnableMenu_NewCharacterInFlexibleGroup(string characterName, FlexibleCharacterGroup flexibleGroup, bool enableMenuContents = true) Parameters characterName string The name of the new character. flexibleGroup FlexibleCharacterGroup The FlexibleCharacterGroup the new character will be added to when saved. enableMenuContents bool Optional bool. When not toggled the Character Creation Menu will not automatically open but will still be active and enabled. Remarks A new character will be created and editable. When saved any changes made to the copy will be applied to the original character. Exceptions ArgumentNullException Thrown when the flexibleGroup is null. ArgumentException Thrown when the characterName is blank. EnableMenu_NewPrimaryCharacterSlot(LayeredCharacterTypeSO, bool) Enable the Character Creation Menu for the SingleSlotCharacterGroup in a Character Type located in the LayeredCharacterGroupManager. Creates a new character, Overrides the character if one already exists. public void EnableMenu_NewPrimaryCharacterSlot(LayeredCharacterTypeSO characterType = null, bool enableMenuContents = true) Parameters characterType LayeredCharacterTypeSO The Character Type used to find the SingleSlotCharacterGroup. enableMenuContents bool Optional bool. When not toggled the Character Creation Menu will not automatically open but will still be active and enabled. Remarks If a character does not exist in the group, the new character will be put in the group when saved. If a character already exists it will overridden when the new character is saved. Exceptions ArgumentNullException Thrown when characterType is null. ArgumentException Thrown when characterType is invalid. EnableMenu_PrimaryCharacterSlot(LayeredCharacterTypeSO, bool) Enable the Character Creation Menu for the SingleSlotCharacterGroup in a Character Type located in the LayeredCharacterGroupManager. If a character exists, use it; otherwise, create a new one. public void EnableMenu_PrimaryCharacterSlot(LayeredCharacterTypeSO characterType = null, bool enableMenuContents = true) Parameters characterType LayeredCharacterTypeSO The Character Type used to find the SingleSlotCharacterGroup. enableMenuContents bool Optional bool. When not toggled the Character Creation Menu will not automatically open but will still be active and enabled. Remarks If a character already exists it will be copied and editable inside the menu. When the character is saved, all changes will be applied to the original character. Exceptions ArgumentException Thrown when characterType is invalid. ResetCharacter() Reset the LayeredCharacter inside the ActiveCharacterDraft to the state it was in when the Character Creation Menu was first enabled. public void ResetCharacter() SaveCharacter() Save the ActiveCharacterDraft and put it in a group if relevent. public void SaveCharacter() Events OnBeforeMenuDisabled public event EventHandler OnBeforeMenuDisabled Event Type EventHandler OnCharacterSavedInMenuInstance public static event EventHandler<LayeredCharacter> OnCharacterSavedInMenuInstance Event Type EventHandler<LayeredCharacter> OnMenuEnabledAndSetup public event EventHandler OnMenuEnabledAndSetup Event Type EventHandler OnMenuInstanceDisabled public static event EventHandler<CharacterCreationMenuManager> OnMenuInstanceDisabled Event Type EventHandler<CharacterCreationMenuManager> OnMenuLoadingProgressUpdated public event EventHandler<float> OnMenuLoadingProgressUpdated Event Type EventHandler<float>"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterLayerCarouselSelector.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterLayerCarouselSelector.html",
    "title": "Class CharacterLayerCarouselSelector | BlazerTech Character Management System",
    "summary": "Class CharacterLayerCarouselSelector Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CharacterLayerCarouselSelector : CharacterLayerSelector Inheritance object Object Component Behaviour MonoBehaviour CharacterLayerSelector CharacterLayerCarouselSelector Inherited Members CharacterLayerSelector.SelectorBase CharacterLayerSelector.LayerNameText CharacterLayerSelector.CharacterLayerOverride CharacterLayerSelector.characterCreationMenuManager CharacterLayerSelector.AssignedLayer CharacterLayerSelector.AssignLayer(CharacterLayer) CharacterLayerSelector.Hide() CharacterLayerSelector.Unhide() CharacterLayerSelector.ChangeAlpha(float) CharacterLayerSelector.RandomizeLayer() CharacterLayerSelector.OnDestroy() CharacterLayerSelector.Reset() Methods CharacterLayerUpdated() Called whenever the Character Layer assigned to this selector is updated protected override void CharacterLayerUpdated() DisableInteractivity() public override void DisableInteractivity() EnableInteractivity() public override void EnableInteractivity() MenuDisabled() Called whenever the Character Creation Menu is disabled protected override void MenuDisabled() NextOption() public void NextOption() PreviousOption() public void PreviousOption() Setup() Setup is called every time the Character Creation Menu is opened protected override void Setup()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterLayerDropdownSelector.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterLayerDropdownSelector.html",
    "title": "Class CharacterLayerDropdownSelector | BlazerTech Character Management System",
    "summary": "Class CharacterLayerDropdownSelector Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CharacterLayerDropdownSelector : CharacterLayerSelector Inheritance object Object Component Behaviour MonoBehaviour CharacterLayerSelector CharacterLayerDropdownSelector Inherited Members CharacterLayerSelector.SelectorBase CharacterLayerSelector.LayerNameText CharacterLayerSelector.CharacterLayerOverride CharacterLayerSelector.characterCreationMenuManager CharacterLayerSelector.AssignedLayer CharacterLayerSelector.AssignLayer(CharacterLayer) CharacterLayerSelector.Hide() CharacterLayerSelector.Unhide() CharacterLayerSelector.ChangeAlpha(float) CharacterLayerSelector.RandomizeLayer() Properties Dropdown public TMP_Dropdown Dropdown { get; } Property Value TMP_Dropdown Methods CharacterLayerUpdated() Called whenever the Character Layer assigned to this selector is updated protected override void CharacterLayerUpdated() DisableInteractivity() public override void DisableInteractivity() EnableInteractivity() public override void EnableInteractivity() MenuDisabled() Called whenever the Character Creation Menu is disabled protected override void MenuDisabled() OnDestroy() protected override void OnDestroy() Reset() protected override void Reset() Setup() Setup is called every time the Character Creation Menu is opened protected override void Setup()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterLayerElementSelector.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterLayerElementSelector.html",
    "title": "Class CharacterLayerElementSelector | BlazerTech Character Management System",
    "summary": "Class CharacterLayerElementSelector Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CharacterLayerElementSelector : CharacterLayerSelector Inheritance object Object Component Behaviour MonoBehaviour CharacterLayerSelector CharacterLayerElementSelector Inherited Members CharacterLayerSelector.SelectorBase CharacterLayerSelector.LayerNameText CharacterLayerSelector.CharacterLayerOverride CharacterLayerSelector.characterCreationMenuManager CharacterLayerSelector.AssignedLayer CharacterLayerSelector.AssignLayer(CharacterLayer) CharacterLayerSelector.Hide() CharacterLayerSelector.Unhide() CharacterLayerSelector.ChangeAlpha(float) CharacterLayerSelector.RandomizeLayer() CharacterLayerSelector.OnDestroy() CharacterLayerSelector.Reset() Methods ApplyLayerOption(LayerOptionUIElement) public void ApplyLayerOption(LayerOptionUIElement element) Parameters element LayerOptionUIElement CharacterLayerUpdated() Called whenever the Character Layer assigned to this selector is updated protected override void CharacterLayerUpdated() DisableInteractivity() public override void DisableInteractivity() EnableInteractivity() public override void EnableInteractivity() MenuDisabled() Called whenever the Character Creation Menu is disabled protected override void MenuDisabled() Setup() Setup is called every time the Character Creation Menu is opened protected override void Setup()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterLayerSelector.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterLayerSelector.html",
    "title": "Class CharacterLayerSelector | BlazerTech Character Management System",
    "summary": "Class CharacterLayerSelector Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll Abstract base class used by all Layer Selectors [DisallowMultipleComponent] public abstract class CharacterLayerSelector : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CharacterLayerSelector Derived CharacterLayerCarouselSelector CharacterLayerDropdownSelector CharacterLayerElementSelector CharacterLayerTabSelector Fields characterCreationMenuManager protected CharacterCreationMenuManager characterCreationMenuManager Field Value CharacterCreationMenuManager Properties AssignedLayer public CharacterLayer AssignedLayer { get; } Property Value CharacterLayer CharacterLayerOverride public CharacterLayerDefinitionSO CharacterLayerOverride { get; } Property Value CharacterLayerDefinitionSO LayerNameText [Tooltip(\"If assinged; sets the text to the name of the assigned layer.\")] public TMP_Text LayerNameText { get; } Property Value TMP_Text SelectorBase public GameObject SelectorBase { get; } Property Value GameObject Methods AssignLayer(CharacterLayer) public bool AssignLayer(CharacterLayer layer) Parameters layer CharacterLayer Returns bool ChangeAlpha(float) public virtual void ChangeAlpha(float alpha) Parameters alpha float CharacterLayerUpdated() Called whenever the Character Layer assigned to this selector is updated protected abstract void CharacterLayerUpdated() DisableInteractivity() public abstract void DisableInteractivity() EnableInteractivity() public abstract void EnableInteractivity() Hide() public virtual void Hide() MenuDisabled() Called whenever the Character Creation Menu is disabled protected abstract void MenuDisabled() OnDestroy() protected virtual void OnDestroy() RandomizeLayer() public void RandomizeLayer() Reset() protected virtual void Reset() Setup() Setup is called every time the Character Creation Menu is opened protected abstract void Setup() Unhide() public virtual void Unhide()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterLayerTabSelector.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterLayerTabSelector.html",
    "title": "Class CharacterLayerTabSelector | BlazerTech Character Management System",
    "summary": "Class CharacterLayerTabSelector Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CharacterLayerTabSelector : CharacterLayerSelector Inheritance object Object Component Behaviour MonoBehaviour CharacterLayerSelector CharacterLayerTabSelector Inherited Members CharacterLayerSelector.SelectorBase CharacterLayerSelector.LayerNameText CharacterLayerSelector.CharacterLayerOverride CharacterLayerSelector.characterCreationMenuManager CharacterLayerSelector.AssignedLayer CharacterLayerSelector.AssignLayer(CharacterLayer) CharacterLayerSelector.Hide() CharacterLayerSelector.Unhide() CharacterLayerSelector.ChangeAlpha(float) CharacterLayerSelector.RandomizeLayer() CharacterLayerSelector.OnDestroy() Methods CharacterLayerUpdated() Called whenever the Character Layer assigned to this selector is updated protected override void CharacterLayerUpdated() DisableInteractivity() public override void DisableInteractivity() EnableInteractivity() public override void EnableInteractivity() MenuDisabled() Called whenever the Character Creation Menu is disabled protected override void MenuDisabled() Reset() protected override void Reset() SetSelectedLayer() public void SetSelectedLayer() Setup() Setup is called every time the Character Creation Menu is opened protected override void Setup()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterListEntryDisplayType.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterListEntryDisplayType.html",
    "title": "Enum CharacterListEntryDisplayType | BlazerTech Character Management System",
    "summary": "Enum CharacterListEntryDisplayType Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public enum CharacterListEntryDisplayType Fields Sprite = 1 Text = 0"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterPressenceController.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterPressenceController.html",
    "title": "Class CharacterPressenceController | BlazerTech Character Management System",
    "summary": "Class CharacterPressenceController Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CharacterPressenceController : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CharacterPressenceController"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterPreviewMode.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterPreviewMode.html",
    "title": "Enum CharacterPreviewMode | BlazerTech Character Management System",
    "summary": "Enum CharacterPreviewMode Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public enum CharacterPreviewMode Fields Aniamted = 1 Static = 0"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterSelectionLoadingScreenHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.CharacterSelectionLoadingScreenHandler.html",
    "title": "Class CharacterSelectionLoadingScreenHandler | BlazerTech Character Management System",
    "summary": "Class CharacterSelectionLoadingScreenHandler Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class CharacterSelectionLoadingScreenHandler : MonoBehaviour, ILoadingScreen Inheritance object Object Component Behaviour MonoBehaviour CharacterSelectionLoadingScreenHandler Implements ILoadingScreen Events OnLoadingFinished public event EventHandler OnLoadingFinished Event Type EventHandler OnLoadingProgressUpdated public event EventHandler<float> OnLoadingProgressUpdated Event Type EventHandler<float>"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.ElementDisplayMode.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.ElementDisplayMode.html",
    "title": "Enum ElementDisplayMode | BlazerTech Character Management System",
    "summary": "Enum ElementDisplayMode Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public enum ElementDisplayMode Fields Sprite = 1 Text = 0 TextAndSprite = 2"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.GameObjectStateNotifier.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.GameObjectStateNotifier.html",
    "title": "Class GameObjectStateNotifier | BlazerTech Character Management System",
    "summary": "Class GameObjectStateNotifier Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class GameObjectStateNotifier : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour GameObjectStateNotifier Events OnGameObjectDisabled public event EventHandler OnGameObjectDisabled Event Type EventHandler OnGameObjectEnabled public event EventHandler OnGameObjectEnabled Event Type EventHandler OnGameObjectStateChanged public event EventHandler<bool> OnGameObjectStateChanged Event Type EventHandler<bool>"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.HistoryPanelEntry.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.HistoryPanelEntry.html",
    "title": "Class HistoryPanelEntry | BlazerTech Character Management System",
    "summary": "Class HistoryPanelEntry Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class HistoryPanelEntry : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour HistoryPanelEntry Properties DisplayMode public ElementDisplayMode DisplayMode { get; } Property Value ElementDisplayMode Snapshot public LayeredCharacterSnapshot Snapshot { get; } Property Value LayeredCharacterSnapshot Methods ApplyCharacterSnapshot() public void ApplyCharacterSnapshot() Deactivate() public void Deactivate() Setup(CCMHistoryTracker, LayeredCharacterSnapshot) public void Setup(CCMHistoryTracker historyTracker, LayeredCharacterSnapshot snapshot) Parameters historyTracker CCMHistoryTracker snapshot LayeredCharacterSnapshot"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.ILoadingScreen.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.ILoadingScreen.html",
    "title": "Interface ILoadingScreen | BlazerTech Character Management System",
    "summary": "Interface ILoadingScreen Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public interface ILoadingScreen Events OnLoadingFinished event EventHandler OnLoadingFinished Event Type EventHandler OnLoadingProgressUpdated event EventHandler<float> OnLoadingProgressUpdated Event Type EventHandler<float>"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.LayerOptionUIElement.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.LayerOptionUIElement.html",
    "title": "Class LayerOptionUIElement | BlazerTech Character Management System",
    "summary": "Class LayerOptionUIElement Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class LayerOptionUIElement : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LayerOptionUIElement Properties DisplayMode public ElementDisplayMode DisplayMode { get; } Property Value ElementDisplayMode Layer public CharacterLayer Layer { get; } Property Value CharacterLayer LayerOption public CharacterLayerOption LayerOption { get; } Property Value CharacterLayerOption Methods ApplyLayerOption() public void ApplyLayerOption() SetSelectedState(bool) public void SetSelectedState(bool selected) Parameters selected bool Setup(CharacterLayer, CharacterLayerOption, bool, CharacterLayerElementSelector) public void Setup(CharacterLayer layer, CharacterLayerOption layerOption, bool isSelected, CharacterLayerElementSelector characterLayerElementSelector) Parameters layer CharacterLayer layerOption CharacterLayerOption isSelected bool characterLayerElementSelector CharacterLayerElementSelector"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.LayerSelectorInitializationMode.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.LayerSelectorInitializationMode.html",
    "title": "Enum LayerSelectorInitializationMode | BlazerTech Character Management System",
    "summary": "Enum LayerSelectorInitializationMode Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public enum LayerSelectorInitializationMode Fields AutoCreate = 0 InitializeExisting = 1"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.LayeredCharacterListEntry.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.LayeredCharacterListEntry.html",
    "title": "Class LayeredCharacterListEntry | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterListEntry Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class LayeredCharacterListEntry : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LayeredCharacterListEntry Methods RemoveCharacter() public void RemoveCharacter() SelectCharacter() public void SelectCharacter() Setup(LayeredCharacter, LayeredCharacterSelectionList) public Task Setup(LayeredCharacter character, LayeredCharacterSelectionList list) Parameters character LayeredCharacter list LayeredCharacterSelectionList Returns Task"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.LayeredCharacterListNewCharacterEntry.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.LayeredCharacterListNewCharacterEntry.html",
    "title": "Class LayeredCharacterListNewCharacterEntry | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterListNewCharacterEntry Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class LayeredCharacterListNewCharacterEntry : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LayeredCharacterListNewCharacterEntry Methods CreateNewCharacter() public void CreateNewCharacter() Initialize(LayeredCharacterSelectionList) public void Initialize(LayeredCharacterSelectionList list) Parameters list LayeredCharacterSelectionList"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.LayeredCharacterListType.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.LayeredCharacterListType.html",
    "title": "Enum LayeredCharacterListType | BlazerTech Character Management System",
    "summary": "Enum LayeredCharacterListType Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public enum LayeredCharacterListType Fields Fixed = 1 Flexibe = 0"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.LayeredCharacterSelectionList.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.LayeredCharacterSelectionList.html",
    "title": "Class LayeredCharacterSelectionList | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterSelectionList Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class LayeredCharacterSelectionList : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LayeredCharacterSelectionList Properties CreateNewCharactersPermission public bool CreateNewCharactersPermission { get; } Property Value bool EditCharactersPermission public bool EditCharactersPermission { get; } Property Value bool EnabledAndSetup public bool EnabledAndSetup { get; } Property Value bool FixedGroupSize public int FixedGroupSize { get; } Property Value int GroupName public string GroupName { get; } Property Value string LayeredCharacterType public LayeredCharacterTypeSO LayeredCharacterType { get; set; } Property Value LayeredCharacterTypeSO ListType public LayeredCharacterListType ListType { get; } Property Value LayeredCharacterListType RemoveCharactersPermission public bool RemoveCharactersPermission { get; } Property Value bool Methods CreatNewCharacterInList() public void CreatNewCharacterInList() EditCharacter(LayeredCharacter) public bool EditCharacter(LayeredCharacter character) Parameters character LayeredCharacter Returns bool RemoveCharacterFromList(LayeredCharacter) public bool RemoveCharacterFromList(LayeredCharacter character) Parameters character LayeredCharacter Returns bool Events OnMenuEnabledAndSetup public event EventHandler OnMenuEnabledAndSetup Event Type EventHandler OnMenuLoadingProgressUpdated public event EventHandler<float> OnMenuLoadingProgressUpdated Event Type EventHandler<float>"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.LoadingScreenProgress.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.LoadingScreenProgress.html",
    "title": "Class LoadingScreenProgress | BlazerTech Character Management System",
    "summary": "Class LoadingScreenProgress Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public abstract class LoadingScreenProgress : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LoadingScreenProgress Derived LoadingScreenProgressBar LoadingScreenProgressText Methods OnLoadingProgressUpdated(object, float) protected abstract void OnLoadingProgressUpdated(object sender, float progress) Parameters sender object progress float OnLoadingStarting() protected abstract void OnLoadingStarting()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.LoadingScreenProgressBar.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.LoadingScreenProgressBar.html",
    "title": "Class LoadingScreenProgressBar | BlazerTech Character Management System",
    "summary": "Class LoadingScreenProgressBar Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class LoadingScreenProgressBar : LoadingScreenProgress Inheritance object Object Component Behaviour MonoBehaviour LoadingScreenProgress LoadingScreenProgressBar Methods OnLoadingProgressUpdated(object, float) protected override void OnLoadingProgressUpdated(object sender, float progress) Parameters sender object progress float OnLoadingStarting() protected override void OnLoadingStarting()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.LoadingScreenProgressText.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.LoadingScreenProgressText.html",
    "title": "Class LoadingScreenProgressText | BlazerTech Character Management System",
    "summary": "Class LoadingScreenProgressText Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class LoadingScreenProgressText : LoadingScreenProgress Inheritance object Object Component Behaviour MonoBehaviour LoadingScreenProgress LoadingScreenProgressText Methods OnLoadingProgressUpdated(object, float) protected override void OnLoadingProgressUpdated(object sender, float progress) Parameters sender object progress float OnLoadingStarting() protected override void OnLoadingStarting()"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.LoadingScreenRepeatingText.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.LoadingScreenRepeatingText.html",
    "title": "Class LoadingScreenRepeatingText | BlazerTech Character Management System",
    "summary": "Class LoadingScreenRepeatingText Namespace BlazerTech.CharacterManagement.CharacterCreator Assembly Assembly-CSharp.dll public class LoadingScreenRepeatingText : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LoadingScreenRepeatingText"
  },
  "api/BlazerTech.CharacterManagement.CharacterCreator.html": {
    "href": "api/BlazerTech.CharacterManagement.CharacterCreator.html",
    "title": "Namespace BlazerTech.CharacterManagement.CharacterCreator | BlazerTech Character Management System",
    "summary": "Namespace BlazerTech.CharacterManagement.CharacterCreator Classes CCMAnimationPreviewButtonHandler CCMAnimationPreviewSwitcherManager CCMBase Base class for all classes part of the Character Creator Menu CCMCharacterLayerSelectionManager CCMCharacterPreviewHandler CCMControlledRandomizationHandler CCMDisplayNameInputFieldHandler CCMHistoryPanel CCMHistoryTracker Tracks all modifications made to the ActiveCharacterDraft in the Character Creator. CCMLayerRandomizeToggle CCMLoadingScreenHandler CCMRelay Used to relay method calls to the CharacterCreationMenuManager. CCMSelectedLayerTabHandler CCMTimelineButtonHandler CharacterCreationMenuEnablerRelay CharacterCreationMenuManager CharacterLayerCarouselSelector CharacterLayerDropdownSelector CharacterLayerElementSelector CharacterLayerSelector Abstract base class used by all Layer Selectors CharacterLayerTabSelector CharacterPressenceController CharacterSelectionLoadingScreenHandler GameObjectStateNotifier HistoryPanelEntry LayerOptionUIElement LayeredCharacterListEntry LayeredCharacterListNewCharacterEntry LayeredCharacterSelectionList LoadingScreenProgress LoadingScreenProgressBar LoadingScreenProgressText LoadingScreenRepeatingText Interfaces ILoadingScreen Enums CharacterListEntryDisplayType CharacterPreviewMode ElementDisplayMode LayerSelectorInitializationMode LayeredCharacterListType"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterBase-2.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterBase-2.html",
    "title": "Class CharacterBase<TCharacterType, TCharacterHandler> | BlazerTech Character Management System",
    "summary": "Class CharacterBase<TCharacterType, TCharacterHandler> Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public abstract class CharacterBase<TCharacterType, TCharacterHandler> : IValidatable where TCharacterType : CharacterTypeBaseSO where TCharacterHandler : LoadedCharacterHandlerBase Type Parameters TCharacterType TCharacterHandler Inheritance object CharacterBase<TCharacterType, TCharacterHandler> Implements IValidatable Derived LayeredCharacter UnifiedCharacter Constructors CharacterBase(string, TCharacterType, string) public CharacterBase(string characterName, TCharacterType characterType, string displayName = \"\") Parameters characterName string characterType TCharacterType displayName string Fields CharacterGUID A unique identifier used to reference the character. public readonly Guid CharacterGUID Field Value Guid Remarks Automatically generated in constructor. CharacterName Name used to reference the character. public readonly string CharacterName Field Value string CharacterType public readonly TCharacterType CharacterType Field Value TCharacterType LoadedCharacterHandler public TCharacterHandler LoadedCharacterHandler Field Value TCharacterHandler Properties CharacterDisplayName A display name which can be used to show a characters name in-game. public string CharacterDisplayName { get; set; } Property Value string IsValid True if the character was initiialized correctly; otherwise, false. public bool IsValid { get; protected set; } Property Value bool Methods AcquireCharacterHandler(object) public TCharacterHandler AcquireCharacterHandler(object owner) Parameters owner object Returns TCharacterHandler AcquireCharacterHandlerAsync(object) public Task<TCharacterHandler> AcquireCharacterHandlerAsync(object owner) Parameters owner object Returns Task<TCharacterHandler> LoadCharacterHandler() protected abstract void LoadCharacterHandler() LoadCharacterHandlerAsync() protected abstract Task LoadCharacterHandlerAsync() Returns Task PerformValidationCheck() Determines whether the current character instance is valid by verifying that the CharacterName is not blank and the CharacterType is assigned and valid. public virtual bool PerformValidationCheck() Returns bool true if the character passes all validation checks; otherwise, false. See Also CharacterType ReleaseCharacterHandler(object) public void ReleaseCharacterHandler(object owner) Parameters owner object SetCharacterInvalid() public void SetCharacterInvalid() UnloadCharacterHandler() protected virtual void UnloadCharacterHandler()"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterDraft.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterDraft.html",
    "title": "Class CharacterDraft | BlazerTech Character Management System",
    "summary": "Class CharacterDraft Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll Wrapper class used when editting characters in the Character Creation Menu public abstract class CharacterDraft : IDisposable Inheritance object CharacterDraft Implements IDisposable Derived CharacterDraft_NewCharacter CharacterDraft_PreExistingCharacter Constructors CharacterDraft(LayeredCharacter) public CharacterDraft(LayeredCharacter character) Parameters character LayeredCharacter Fields Character public readonly LayeredCharacter Character Field Value LayeredCharacter Methods Dispose() public void Dispose() ResetCharacter() Resets the Character to the state it was in when CharacterDraft was first created. public void ResetCharacter() SaveCharacter() public abstract LayeredCharacter SaveCharacter() Returns LayeredCharacter Events OnCharacterLayerOptionUpdated public event EventHandler<CharacterLayer.LayerOptionUpdatedEventArgs> OnCharacterLayerOptionUpdated Event Type EventHandler<CharacterLayer.LayerOptionUpdatedEventArgs>"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterDraftType.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterDraftType.html",
    "title": "Enum CharacterDraftType | BlazerTech Character Management System",
    "summary": "Enum CharacterDraftType Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public enum CharacterDraftType Fields NewCharacter = 0 PreExistingCharacter = 1"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterDraft_NewCharacter.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterDraft_NewCharacter.html",
    "title": "Class CharacterDraft_NewCharacter | BlazerTech Character Management System",
    "summary": "Class CharacterDraft_NewCharacter Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll Wrapper for a newely created character within the Character Creation Menu. Added to a group when saved. public class CharacterDraft_NewCharacter : CharacterDraft, IDisposable Inheritance object CharacterDraft CharacterDraft_NewCharacter Implements IDisposable Inherited Members CharacterDraft.Character CharacterDraft.OnCharacterLayerOptionUpdated CharacterDraft.ResetCharacter() CharacterDraft.Dispose() Constructors CharacterDraft_NewCharacter(LayeredCharacter, CharacterGroupBase) public CharacterDraft_NewCharacter(LayeredCharacter character, CharacterGroupBase group) Parameters character LayeredCharacter group CharacterGroupBase Fields Group public CharacterGroupBase Group Field Value CharacterGroupBase Methods SaveCharacter() public override LayeredCharacter SaveCharacter() Returns LayeredCharacter"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterDraft_PreExistingCharacter.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterDraft_PreExistingCharacter.html",
    "title": "Class CharacterDraft_PreExistingCharacter | BlazerTech Character Management System",
    "summary": "Class CharacterDraft_PreExistingCharacter Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll Wrapper for a pre created character when being edited in the Character Creation Menu. A copy of the character is provided and edited in the menu. Changes to the copy will be applied to the original when saved. public class CharacterDraft_PreExistingCharacter : CharacterDraft, IDisposable Inheritance object CharacterDraft CharacterDraft_PreExistingCharacter Implements IDisposable Inherited Members CharacterDraft.Character CharacterDraft.OnCharacterLayerOptionUpdated CharacterDraft.ResetCharacter() CharacterDraft.Dispose() Constructors CharacterDraft_PreExistingCharacter(LayeredCharacter, LayeredCharacter) public CharacterDraft_PreExistingCharacter(LayeredCharacter originalCharacter, LayeredCharacter characterCopy) Parameters originalCharacter LayeredCharacter characterCopy LayeredCharacter Fields preExistingCharacter public LayeredCharacter preExistingCharacter Field Value LayeredCharacter Methods SaveCharacter() public override LayeredCharacter SaveCharacter() Returns LayeredCharacter"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterGroupAutoSaveTriggers.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterGroupAutoSaveTriggers.html",
    "title": "Enum CharacterGroupAutoSaveTriggers | BlazerTech Character Management System",
    "summary": "Enum CharacterGroupAutoSaveTriggers Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Flags] public enum CharacterGroupAutoSaveTriggers Fields All = GameExit | CharacterCreatorSave | SceneChange CharacterCreatorSave = 2 GameExit = 1 None = 0 SceneChange = 4"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterGroupBase.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterGroupBase.html",
    "title": "Class CharacterGroupBase | BlazerTech Character Management System",
    "summary": "Class CharacterGroupBase Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public abstract class CharacterGroupBase Inheritance object CharacterGroupBase Derived FixedCharacterGroup FlexibleCharacterGroup SingleSlotCharacterGroup Constructors CharacterGroupBase(string, LayeredCharacterTypeSO) protected CharacterGroupBase(string groupName, LayeredCharacterTypeSO type) Parameters groupName string type LayeredCharacterTypeSO Fields CharacterType public readonly LayeredCharacterTypeSO CharacterType Field Value LayeredCharacterTypeSO Properties GroupName public string GroupName { get; protected set; } Property Value string Methods AddCharacter(LayeredCharacter) public abstract bool AddCharacter(LayeredCharacter character) Parameters character LayeredCharacter Returns bool ContainsCharacter(LayeredCharacter) public abstract bool ContainsCharacter(LayeredCharacter character) Parameters character LayeredCharacter Returns bool ContainsCharacterWithGUID(Guid) public abstract bool ContainsCharacterWithGUID(Guid guid) Parameters guid Guid Returns bool ContainsCharacterWithName(string) public abstract bool ContainsCharacterWithName(string name) Parameters name string Returns bool RaiseOnCharacterChanged(LayeredCharacter) protected void RaiseOnCharacterChanged(LayeredCharacter character) Parameters character LayeredCharacter Events OnCharacterChanged public event EventHandler<LayeredCharacter> OnCharacterChanged Event Type EventHandler<LayeredCharacter>"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterGroupEntryType.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterGroupEntryType.html",
    "title": "Enum CharacterGroupEntryType | BlazerTech Character Management System",
    "summary": "Enum CharacterGroupEntryType Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public enum CharacterGroupEntryType Fields CharacterTemplate = 1 NewCharacter = 0"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterGroupRegistry.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterGroupRegistry.html",
    "title": "Class CharacterGroupRegistry | BlazerTech Character Management System",
    "summary": "Class CharacterGroupRegistry Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll Holds a collection of three different types of groups. An instance of this class is used for each Layered Character Type. public sealed class CharacterGroupRegistry Inheritance object CharacterGroupRegistry Constructors CharacterGroupRegistry(CharacterTypeGroups_DTO, LayeredCharacterTypeSO) public CharacterGroupRegistry(CharacterTypeGroups_DTO DTO, LayeredCharacterTypeSO characterType) Parameters DTO CharacterTypeGroups_DTO characterType LayeredCharacterTypeSO CharacterGroupRegistry(LayeredCharacterTypeSO) public CharacterGroupRegistry(LayeredCharacterTypeSO type) Parameters type LayeredCharacterTypeSO Fields SuccessfullyInitialized public readonly bool SuccessfullyInitialized Field Value bool Properties CharacterType public LayeredCharacterTypeSO CharacterType { get; } Property Value LayeredCharacterTypeSO FixedGroups public Dictionary<string, FixedCharacterGroup> FixedGroups { get; } Property Value Dictionary<string, FixedCharacterGroup> FlexibleGroups public Dictionary<string, FlexibleCharacterGroup> FlexibleGroups { get; } Property Value Dictionary<string, FlexibleCharacterGroup> PrimaryCharacterSlot public SingleSlotCharacterGroup PrimaryCharacterSlot { get; } Property Value SingleSlotCharacterGroup Methods CreateFixedGroup(string, IList<LayeredCharacter>) public FixedCharacterGroup CreateFixedGroup(string name, IList<LayeredCharacter> characters) Parameters name string characters IList<LayeredCharacter> Returns FixedCharacterGroup CreateFixedGroup(string, int) public FixedCharacterGroup CreateFixedGroup(string name, int size) Parameters name string size int Returns FixedCharacterGroup CreateFlexibleGroup(string) public FlexibleCharacterGroup CreateFlexibleGroup(string name) Parameters name string Returns FlexibleCharacterGroup GetDataTransferObject() public CharacterTypeGroups_DTO GetDataTransferObject() Returns CharacterTypeGroups_DTO GetFixedGroup(string) public FixedCharacterGroup GetFixedGroup(string name) Parameters name string Returns FixedCharacterGroup GetFlexibleGroup(string) public FlexibleCharacterGroup GetFlexibleGroup(string name) Parameters name string Returns FlexibleCharacterGroup GetOrCreateFixedGroup(string, int) public FixedCharacterGroup GetOrCreateFixedGroup(string name, int size) Parameters name string size int Returns FixedCharacterGroup GetOrCreateFlexibleGroup(string) public FlexibleCharacterGroup GetOrCreateFlexibleGroup(string name) Parameters name string Returns FlexibleCharacterGroup"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterGroupType.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterGroupType.html",
    "title": "Enum CharacterGroupType | BlazerTech Character Management System",
    "summary": "Enum CharacterGroupType Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public enum CharacterGroupType Fields FixedGroup = 2 FlexibleGroup = 1 PrimarySlot = 0"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterLayer.LayerOptionUpdatedEventArgs.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterLayer.LayerOptionUpdatedEventArgs.html",
    "title": "Class CharacterLayer.LayerOptionUpdatedEventArgs | BlazerTech Character Management System",
    "summary": "Class CharacterLayer.LayerOptionUpdatedEventArgs Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public class CharacterLayer.LayerOptionUpdatedEventArgs : EventArgs Inheritance object EventArgs CharacterLayer.LayerOptionUpdatedEventArgs Constructors LayerOptionUpdatedEventArgs(CharacterLayer, CharacterLayerOption, CharacterLayerOption) public LayerOptionUpdatedEventArgs(CharacterLayer layer, CharacterLayerOption newLayerOption, CharacterLayerOption oldLayerOption) Parameters layer CharacterLayer newLayerOption CharacterLayerOption oldLayerOption CharacterLayerOption Properties Layer public CharacterLayer Layer { get; } Property Value CharacterLayer NewLayerOption public CharacterLayerOption NewLayerOption { get; } Property Value CharacterLayerOption OldLayerOption public CharacterLayerOption OldLayerOption { get; } Property Value CharacterLayerOption"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterLayer.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterLayer.html",
    "title": "Class CharacterLayer | BlazerTech Character Management System",
    "summary": "Class CharacterLayer Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll Represents a single layer of a character within a LayeredCharacter. Wraps a CharacterLayerOption. [Serializable] public class CharacterLayer Inheritance object CharacterLayer Remarks Each LayeredCharacter contains one CharacterLayer per CharacterLayerDefinitionSO defined in its LayeredCharacterTypeSO. Constructors CharacterLayer(CharacterLayer) Duplicate a Character Layer. public CharacterLayer(CharacterLayer characterLayer) Parameters characterLayer CharacterLayer CharacterLayer(LayeredCharacter, CharacterLayerOption, CharacterLayerDefinitionSO) public CharacterLayer(LayeredCharacter attachedCharacter, CharacterLayerOption layerOption, CharacterLayerDefinitionSO characterLayer) Parameters attachedCharacter LayeredCharacter layerOption CharacterLayerOption characterLayer CharacterLayerDefinitionSO Fields AttachedCharacter public readonly LayeredCharacter AttachedCharacter Field Value LayeredCharacter LayerDefinition public readonly CharacterLayerDefinitionSO LayerDefinition Field Value CharacterLayerDefinitionSO Properties LayerOption public CharacterLayerOption LayerOption { get; set; } Property Value CharacterLayerOption Methods RandomizeLayerOption() public bool RandomizeLayerOption() Returns bool Events OnLayerOptionUpdated public event EventHandler<CharacterLayer.LayerOptionUpdatedEventArgs> OnLayerOptionUpdated Event Type EventHandler<CharacterLayer.LayerOptionUpdatedEventArgs>"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterLayerDefinitionSO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterLayerDefinitionSO.html",
    "title": "Class CharacterLayerDefinitionSO | BlazerTech Character Management System",
    "summary": "Class CharacterLayerDefinitionSO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [CreateAssetMenu(menuName = \"BlazerTech/Character Management System/Layered Character Type/Layered Character Type\", fileName = \"New Character Layer\")] public class CharacterLayerDefinitionSO : ScriptableObject, IValidatable Inheritance object Object ScriptableObject CharacterLayerDefinitionSO Implements IValidatable Properties AttachedCharacterType public LayeredCharacterTypeSO AttachedCharacterType { get; } Property Value LayeredCharacterTypeSO IncludeNoneOption If toggled, adds a 'None' option as the first layer option. Applies immediately when toggled and when CollectLayerOptions_EditMode() is run. public bool IncludeNoneOption { get; } Property Value bool IsValid Gets a value indicating whether the object is currently valid. This value should be updated when PerformValidationCheck() is called. public bool IsValid { get; } Property Value bool LayerName The name used for the layer. Does NOT need to be unique. public string LayerName { get; } Property Value string Remarks Used when displaying layer names in the Character Creator. LayerOptions public IReadOnlyList<CharacterLayerOption> LayerOptions { get; } Property Value IReadOnlyList<CharacterLayerOption> Methods AcquireAllLayerOptionsAsync(Action<float>) public Task AcquireAllLayerOptionsAsync(Action<float> onProgress = null) Parameters onProgress Action<float> Returns Task CollectLayerOptions_EditMode() [Button(\"Collect Layer Options\", EButtonEnableMode.Editor)] public void CollectLayerOptions_EditMode() GetLayerOptionFromIndex(int) public CharacterLayerOption GetLayerOptionFromIndex(int index) Parameters index int Returns CharacterLayerOption GetLayerOptionFromKey(string) public CharacterLayerOption GetLayerOptionFromKey(string key) Parameters key string Returns CharacterLayerOption GetLayerOptionFromSpritesheetName(string) public CharacterLayerOption GetLayerOptionFromSpritesheetName(string spritesheetName) Parameters spritesheetName string Returns CharacterLayerOption Initialize(LayeredCharacterTypeSO) public bool Initialize(LayeredCharacterTypeSO characterType) Parameters characterType LayeredCharacterTypeSO The LayeredCharacterTypeSO used to initialize the layer. Returns bool True if the layer was able to initialize properly. Otherwise, False. Exceptions InvalidOperationException Thrown when AttachedCharacterType is null. ArgumentNullException Thrown when characterType is null. ArgumentException Thrown when the characterType is different from the one used in the layer. IsInitialized() public bool IsInitialized() Returns bool PerformValidationCheck() Checks/Rechecks if the object is valid and updates IsValid accordingly. public bool PerformValidationCheck() Returns bool true if the object is valid after the check; otherwise, false. ReleaseAllLayerOptions() public void ReleaseAllLayerOptions()"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterLayerOption.EquippedCharacterLayerOption_DTO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterLayerOption.EquippedCharacterLayerOption_DTO.html",
    "title": "Class CharacterLayerOption.EquippedCharacterLayerOption_DTO | BlazerTech Character Management System",
    "summary": "Class CharacterLayerOption.EquippedCharacterLayerOption_DTO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll Data Transfer Object (DTO) used to save and load a CharacterLayerOption. [Serializable] public class CharacterLayerOption.EquippedCharacterLayerOption_DTO Inheritance object CharacterLayerOption.EquippedCharacterLayerOption_DTO Constructors EquippedCharacterLayerOption_DTO(CharacterLayerOption) public EquippedCharacterLayerOption_DTO(CharacterLayerOption characterLayerOption) Parameters characterLayerOption CharacterLayerOption EquippedCharacterLayerOption_DTO(string, string) public EquippedCharacterLayerOption_DTO(string characterLayerName, string layerOptionKey) Parameters characterLayerName string layerOptionKey string Fields CharacterLayerName public string CharacterLayerName Field Value string LayerOptionKey public string LayerOptionKey Field Value string"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterLayerOption.LoadedSpriteDataContainer.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterLayerOption.LoadedSpriteDataContainer.html",
    "title": "Class CharacterLayerOption.LoadedSpriteDataContainer | BlazerTech Character Management System",
    "summary": "Class CharacterLayerOption.LoadedSpriteDataContainer Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public class CharacterLayerOption.LoadedSpriteDataContainer Inheritance object CharacterLayerOption.LoadedSpriteDataContainer Constructors LoadedSpriteDataContainer(LayeredCharacterTypeSO, Sprite) public LoadedSpriteDataContainer(LayeredCharacterTypeSO characterTypeSO, Sprite spritesheet) Parameters characterTypeSO LayeredCharacterTypeSO spritesheet Sprite Fields Spritesheet public readonly Sprite Spritesheet Field Value Sprite Methods GetOrCreateCharacterPreview() Get the created character preview. create a new one if one does not already exist. public Sprite GetOrCreateCharacterPreview() Returns Sprite The created character preview sprite."
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterLayerOption.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterLayerOption.html",
    "title": "Class CharacterLayerOption | BlazerTech Character Management System",
    "summary": "Class CharacterLayerOption Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public class CharacterLayerOption : OwnedResourceTracker<CharacterLayerOption.LoadedSpriteDataContainer> Inheritance object OwnedResourceTracker<CharacterLayerOption.LoadedSpriteDataContainer> CharacterLayerOption Inherited Members OwnedResourceTracker<CharacterLayerOption.LoadedSpriteDataContainer>.Owners OwnedResourceTracker<CharacterLayerOption.LoadedSpriteDataContainer>.ReleaseResource(object) Constructors CharacterLayerOption(string, string, string, int, CharacterLayerDefinitionSO, bool) public CharacterLayerOption(string layerOptionID, string displayName, string key, int index, CharacterLayerDefinitionSO layer, bool ignoreSpriteCheck = false) Parameters layerOptionID string displayName string key string index int layer CharacterLayerDefinitionSO ignoreSpriteCheck bool Properties DisplayName public string DisplayName { get; } Property Value string Index public int Index { get; } Property Value int Key The Addressables Key used to load the spritesheet attached to this layer option. public string Key { get; } Property Value string LayerDefinition public CharacterLayerDefinitionSO LayerDefinition { get; } Property Value CharacterLayerDefinitionSO LayerOptionID A unique identifier used to reference a character layer option. public string LayerOptionID { get; } Property Value string LoadedSpriteData public CharacterLayerOption.LoadedSpriteDataContainer LoadedSpriteData { get; } Property Value CharacterLayerOption.LoadedSpriteDataContainer Methods AcquireResource(object) Acquires the resource for an owner public override CharacterLayerOption.LoadedSpriteDataContainer AcquireResource(object owner) Parameters owner object Object claiming ownership Returns CharacterLayerOption.LoadedSpriteDataContainer Managed resource AcquireResourceAsync(object) Acquires the resource for an owner asynchronously public override Task<CharacterLayerOption.LoadedSpriteDataContainer> AcquireResourceAsync(object owner) Parameters owner object Object claiming ownership Returns Task<CharacterLayerOption.LoadedSpriteDataContainer> Managed resource GetAndLoadResource() protected override CharacterLayerOption.LoadedSpriteDataContainer GetAndLoadResource() Returns CharacterLayerOption.LoadedSpriteDataContainer GetAndLoadResourceAsync() protected override Task<CharacterLayerOption.LoadedSpriteDataContainer> GetAndLoadResourceAsync() Returns Task<CharacterLayerOption.LoadedSpriteDataContainer> UnloadResource() protected override void UnloadResource()"
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO-2.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterTemplateBaseSO-2.html",
    "title": "Class CharacterTemplateBaseSO<TCharacterType, TCharacter> | BlazerTech Character Management System",
    "summary": "Class CharacterTemplateBaseSO<TCharacterType, TCharacter> Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll Base class for all Character Templates. public abstract class CharacterTemplateBaseSO<TCharacterType, TCharacter> : ScriptableObject, IValidatable where TCharacterType : CharacterTypeBaseSO Type Parameters TCharacterType TCharacter Inheritance object Object ScriptableObject CharacterTemplateBaseSO<TCharacterType, TCharacter> Implements IValidatable Derived LayeredCharacterTemplateSO UnifiedCharacterTemplateSO Fields isValid protected bool isValid Field Value bool Properties CharacterDisplayName public string CharacterDisplayName { get; } Property Value string CharacterName public string CharacterName { get; } Property Value string CharacterType public TCharacterType CharacterType { get; } Property Value TCharacterType IsValid Gets a value indicating whether the object is currently valid. This value should be updated when PerformValidationCheck() is called. public bool IsValid { get; } Property Value bool Methods CreateNewCharacter() protected abstract TCharacter CreateNewCharacter() Returns TCharacter GetOrCreateCharacter() Create a new character or return the already creted one if it exists. public TCharacter GetOrCreateCharacter() Returns TCharacter PerformValidationCheck() Checks/Rechecks if the object is valid and updates IsValid accordingly. public virtual bool PerformValidationCheck() Returns bool true if the object is valid after the check; otherwise, false."
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterTypeBaseSO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterTypeBaseSO.html",
    "title": "Class CharacterTypeBaseSO | BlazerTech Character Management System",
    "summary": "Class CharacterTypeBaseSO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll bass Scriptable Object for all Character Types. public abstract class CharacterTypeBaseSO : ScriptableObject, IValidatable Inheritance object Object ScriptableObject CharacterTypeBaseSO Implements IValidatable Derived LayeredCharacterTypeSO UnifiedCharacterTypeSO Properties BaseSpritesheet Defines the required base sprite sheet for the character type. Set this spritesheets Sprite Mode to Multiple and slice it. Whenever this character is used the sprites in the BaseSpritesheet will be used and a shader will then override them with the finalized character. Character spritesheets with mismatched dimensions will be rejected when validated. public Texture2D BaseSpritesheet { get; } Property Value Texture2D CharacterController The animator controller asset assigned to characters of this type. Animations inside this controller should use sprites in the BaseSpritesheet. public RuntimeAnimatorController CharacterController { get; } Property Value RuntimeAnimatorController CharacterTypeID A unique identifier used to reference this character type. Must be unique across all character types. public string CharacterTypeID { get; } Property Value string IsValid Gets a value indicating whether the object is currently valid. This value should be updated when PerformValidationCheck() is called. public bool IsValid { get; protected set; } Property Value bool Methods IsValidCharacterSpriteSheet(Sprite) Returns true if the sprite fits the conditions for the Character Type. public virtual bool IsValidCharacterSpriteSheet(Sprite sprite) Parameters sprite Sprite Returns bool PerformValidationCheck() Checks/Rechecks if the object is valid and updates IsValid accordingly. public virtual bool PerformValidationCheck() Returns bool true if the object is valid after the check; otherwise, false."
  },
  "api/BlazerTech.CharacterManagement.Characters.CharacterTypeGroups_DTO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.CharacterTypeGroups_DTO.html",
    "title": "Class CharacterTypeGroups_DTO | BlazerTech Character Management System",
    "summary": "Class CharacterTypeGroups_DTO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public class CharacterTypeGroups_DTO Inheritance object CharacterTypeGroups_DTO Constructors CharacterTypeGroups_DTO(CharacterGroupRegistry) public CharacterTypeGroups_DTO(CharacterGroupRegistry characterTypeGroups) Parameters characterTypeGroups CharacterGroupRegistry Fields CharacterTypeIdentifier public string CharacterTypeIdentifier Field Value string FixedGroups public List<FixedCharacterGroup.FixedCharacterGroup_DTO> FixedGroups Field Value List<FixedCharacterGroup.FixedCharacterGroup_DTO> FlexibleGroups public List<FlexibleCharacterGroup.FlexibleCharacterGroup_DTO> FlexibleGroups Field Value List<FlexibleCharacterGroup.FlexibleCharacterGroup_DTO> PrimaryCharacterSlot public SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO PrimaryCharacterSlot Field Value SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO Methods IsValid() public bool IsValid() Returns bool"
  },
  "api/BlazerTech.CharacterManagement.Characters.FixedCharacterGroup.FixedCharacterGroup_DTO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.FixedCharacterGroup.FixedCharacterGroup_DTO.html",
    "title": "Class FixedCharacterGroup.FixedCharacterGroup_DTO | BlazerTech Character Management System",
    "summary": "Class FixedCharacterGroup.FixedCharacterGroup_DTO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public class FixedCharacterGroup.FixedCharacterGroup_DTO Inheritance object FixedCharacterGroup.FixedCharacterGroup_DTO Constructors FixedCharacterGroup_DTO(FixedCharacterGroup) public FixedCharacterGroup_DTO(FixedCharacterGroup fixedCharacterGroup) Parameters fixedCharacterGroup FixedCharacterGroup FixedCharacterGroup_DTO(string, LayeredCharacter[]) public FixedCharacterGroup_DTO(string groupName, LayeredCharacter[] characters) Parameters groupName string characters LayeredCharacter[] Fields Characters public LayeredCharacter.LayeredCharacter_DTO[] Characters Field Value LayeredCharacter_DTO[] GroupName public string GroupName Field Value string"
  },
  "api/BlazerTech.CharacterManagement.Characters.FixedCharacterGroup.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.FixedCharacterGroup.html",
    "title": "Class FixedCharacterGroup | BlazerTech Character Management System",
    "summary": "Class FixedCharacterGroup Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public sealed class FixedCharacterGroup : CharacterGroupBase Inheritance object CharacterGroupBase FixedCharacterGroup Inherited Members CharacterGroupBase.GroupName CharacterGroupBase.CharacterType CharacterGroupBase.OnCharacterChanged Constructors FixedCharacterGroup(FixedCharacterGroup_DTO, LayeredCharacterTypeSO) public FixedCharacterGroup(FixedCharacterGroup.FixedCharacterGroup_DTO DTO, LayeredCharacterTypeSO characterType) Parameters DTO FixedCharacterGroup.FixedCharacterGroup_DTO characterType LayeredCharacterTypeSO FixedCharacterGroup(string, IList<LayeredCharacter>, LayeredCharacterTypeSO) public FixedCharacterGroup(string groupName, IList<LayeredCharacter> characters, LayeredCharacterTypeSO characterType) Parameters groupName string characters IList<LayeredCharacter> characterType LayeredCharacterTypeSO FixedCharacterGroup(string, int, LayeredCharacterTypeSO) public FixedCharacterGroup(string groupName, int size, LayeredCharacterTypeSO characterType) Parameters groupName string size int characterType LayeredCharacterTypeSO Fields Characters public readonly LayeredCharacter[] Characters Field Value LayeredCharacter[] Methods AddCharacter(LayeredCharacter) Unsupported in Fixed Groups. public override bool AddCharacter(LayeredCharacter character) Parameters character LayeredCharacter Returns bool ContainsCharacter(LayeredCharacter) public override bool ContainsCharacter(LayeredCharacter character) Parameters character LayeredCharacter Returns bool ContainsCharacterWithGUID(Guid) public override bool ContainsCharacterWithGUID(Guid guid) Parameters guid Guid Returns bool ContainsCharacterWithName(string) public override bool ContainsCharacterWithName(string name) Parameters name string Returns bool ReplaceAt(int, LayeredCharacter) Replace a character at a specified index with another character. public bool ReplaceAt(int index, LayeredCharacter character) Parameters index int character LayeredCharacter Returns bool SwapCharacters(int, int) Swaps two characters at the specified indexes. public void SwapCharacters(int indexA, int indexB) Parameters indexA int The index of the first character to swap. indexB int The index of the second character to swap. Exceptions ArgumentOutOfRangeException Thrown if indexA or indexB is outside the bounds of the list."
  },
  "api/BlazerTech.CharacterManagement.Characters.FlexibleCharacterGroup.FlexibleCharacterGroup_DTO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.FlexibleCharacterGroup.FlexibleCharacterGroup_DTO.html",
    "title": "Class FlexibleCharacterGroup.FlexibleCharacterGroup_DTO | BlazerTech Character Management System",
    "summary": "Class FlexibleCharacterGroup.FlexibleCharacterGroup_DTO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public class FlexibleCharacterGroup.FlexibleCharacterGroup_DTO Inheritance object FlexibleCharacterGroup.FlexibleCharacterGroup_DTO Constructors FlexibleCharacterGroup_DTO(FlexibleCharacterGroup) public FlexibleCharacterGroup_DTO(FlexibleCharacterGroup flexibleCharacterGroup) Parameters flexibleCharacterGroup FlexibleCharacterGroup FlexibleCharacterGroup_DTO(string, List<LayeredCharacter>) public FlexibleCharacterGroup_DTO(string groupName, List<LayeredCharacter> characters) Parameters groupName string characters List<LayeredCharacter> Fields Characters public List<LayeredCharacter.LayeredCharacter_DTO> Characters Field Value List<LayeredCharacter.LayeredCharacter_DTO> GroupName public string GroupName Field Value string"
  },
  "api/BlazerTech.CharacterManagement.Characters.FlexibleCharacterGroup.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.FlexibleCharacterGroup.html",
    "title": "Class FlexibleCharacterGroup | BlazerTech Character Management System",
    "summary": "Class FlexibleCharacterGroup Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public sealed class FlexibleCharacterGroup : CharacterGroupBase Inheritance object CharacterGroupBase FlexibleCharacterGroup Inherited Members CharacterGroupBase.GroupName CharacterGroupBase.CharacterType CharacterGroupBase.OnCharacterChanged Constructors FlexibleCharacterGroup(FlexibleCharacterGroup_DTO, LayeredCharacterTypeSO) public FlexibleCharacterGroup(FlexibleCharacterGroup.FlexibleCharacterGroup_DTO DTO, LayeredCharacterTypeSO characterType) Parameters DTO FlexibleCharacterGroup.FlexibleCharacterGroup_DTO characterType LayeredCharacterTypeSO FlexibleCharacterGroup(LayeredCharacterTypeSO, string) public FlexibleCharacterGroup(LayeredCharacterTypeSO characterType, string groupName) Parameters characterType LayeredCharacterTypeSO groupName string Properties Characters public IReadOnlyList<LayeredCharacter> Characters { get; } Property Value IReadOnlyList<LayeredCharacter> Methods AddCharacter(LayeredCharacter) public override bool AddCharacter(LayeredCharacter character) Parameters character LayeredCharacter Returns bool ContainsCharacter(LayeredCharacter) public override bool ContainsCharacter(LayeredCharacter character) Parameters character LayeredCharacter Returns bool ContainsCharacterWithGUID(Guid) public override bool ContainsCharacterWithGUID(Guid guid) Parameters guid Guid Returns bool ContainsCharacterWithName(string) public override bool ContainsCharacterWithName(string name) Parameters name string Returns bool RemoveCharacter(LayeredCharacter) public bool RemoveCharacter(LayeredCharacter character) Parameters character LayeredCharacter Returns bool SwapCharacters(int, int) Swaps two characters at the specified indexes. public void SwapCharacters(int indexA, int indexB) Parameters indexA int The index of the first character to swap. indexB int The index of the second character to swap. Exceptions ArgumentOutOfRangeException Thrown if indexA or indexB is outside the bounds of the list."
  },
  "api/BlazerTech.CharacterManagement.Characters.GroupTemplateEntry.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.GroupTemplateEntry.html",
    "title": "Class GroupTemplateEntry | BlazerTech Character Management System",
    "summary": "Class GroupTemplateEntry Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public class GroupTemplateEntry Inheritance object GroupTemplateEntry Properties CharacterName public string CharacterName { get; } Property Value string EntryType public CharacterGroupEntryType EntryType { get; } Property Value CharacterGroupEntryType Template public LayeredCharacterTemplateSO Template { get; } Property Value LayeredCharacterTemplateSO"
  },
  "api/BlazerTech.CharacterManagement.Characters.LayerOptionMapping.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LayerOptionMapping.html",
    "title": "Class LayerOptionMapping | BlazerTech Character Management System",
    "summary": "Class LayerOptionMapping Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll References a CharacterLayerOption within a CharacterLayerDefinitionSO by LayerOptionID. [Serializable] public class LayerOptionMapping Inheritance object LayerOptionMapping Constructors LayerOptionMapping(CharacterLayerDefinitionSO) public LayerOptionMapping(CharacterLayerDefinitionSO collectionSO) Parameters collectionSO CharacterLayerDefinitionSO Fields LayerOptionID public string LayerOptionID Field Value string characterLayer public CharacterLayerDefinitionSO characterLayer Field Value CharacterLayerDefinitionSO"
  },
  "api/BlazerTech.CharacterManagement.Characters.LayeredCharacter.LayeredCharacter_DTO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LayeredCharacter.LayeredCharacter_DTO.html",
    "title": "Class LayeredCharacter.LayeredCharacter_DTO | BlazerTech Character Management System",
    "summary": "Class LayeredCharacter.LayeredCharacter_DTO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public class LayeredCharacter.LayeredCharacter_DTO Inheritance object LayeredCharacter.LayeredCharacter_DTO Constructors LayeredCharacter_DTO(LayeredCharacter) public LayeredCharacter_DTO(LayeredCharacter character) Parameters character LayeredCharacter Fields CharacterDisplayName public string CharacterDisplayName Field Value string CharacterName public string CharacterName Field Value string CharacterTypeIdentifier public string CharacterTypeIdentifier Field Value string EquippedLayers public List<CharacterLayerOption.EquippedCharacterLayerOption_DTO> EquippedLayers Field Value List<CharacterLayerOption.EquippedCharacterLayerOption_DTO>"
  },
  "api/BlazerTech.CharacterManagement.Characters.LayeredCharacter.LoadedLayeredCharacterHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LayeredCharacter.LoadedLayeredCharacterHandler.html",
    "title": "Class LayeredCharacter.LoadedLayeredCharacterHandler | BlazerTech Character Management System",
    "summary": "Class LayeredCharacter.LoadedLayeredCharacterHandler Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public class LayeredCharacter.LoadedLayeredCharacterHandler : LoadedCharacterHandlerBase, IDisposable Inheritance object LoadedCharacterHandlerBase LayeredCharacter.LoadedLayeredCharacterHandler Implements IDisposable Inherited Members LoadedCharacterHandlerBase.CharacterMPB Constructors LoadedLayeredCharacterHandler(LayeredCharacter) public LoadedLayeredCharacterHandler(LayeredCharacter character) Parameters character LayeredCharacter Methods CreateNewCharacterMaterial() public Material CreateNewCharacterMaterial() Returns Material CreateNewCharacterMaterialAsync() public Task<Material> CreateNewCharacterMaterialAsync() Returns Task<Material> Dispose() public override void Dispose() LoadUnloadedLayersAsync() public Task LoadUnloadedLayersAsync() Returns Task UpdateCharacterMaterialAsync() public void UpdateCharacterMaterialAsync() Events OnCharacterLayerOptionUpdated public event EventHandler<CharacterLayer.LayerOptionUpdatedEventArgs> OnCharacterLayerOptionUpdated Event Type EventHandler<CharacterLayer.LayerOptionUpdatedEventArgs>"
  },
  "api/BlazerTech.CharacterManagement.Characters.LayeredCharacter.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LayeredCharacter.html",
    "title": "Class LayeredCharacter | BlazerTech Character Management System",
    "summary": "Class LayeredCharacter Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll Represents a character made of multiple modular layers, such as body, outfit, hairstyle, etc. Each layer can be placed on top of each other in order to create the final character. public class LayeredCharacter : CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>, IValidatable Inheritance object CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler> LayeredCharacter Implements IValidatable Inherited Members CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.CharacterType CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.LoadedCharacterHandler CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.CharacterGUID CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.CharacterName CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.CharacterDisplayName CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.IsValid CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.PerformValidationCheck() CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.SetCharacterInvalid() CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.AcquireCharacterHandler(object) CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.AcquireCharacterHandlerAsync(object) CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.ReleaseCharacterHandler(object) CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.LoadCharacterHandler() CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.LoadCharacterHandlerAsync() CharacterBase<LayeredCharacterTypeSO, LayeredCharacter.LoadedLayeredCharacterHandler>.UnloadCharacterHandler() Remarks A LayeredCharacter is tied to a LayeredCharacterTypeSO, which defines the base spritesheet and animator controller used. It also defines the layers the character must include. Each equipped layer is represented by a CharacterLayer, which references one option in a CharacterLayerDefinitionSO asset. Constructors LayeredCharacter(LayeredCharacter) Duplicate Character. public LayeredCharacter(LayeredCharacter character) Parameters character LayeredCharacter The character to create a copy of. Exceptions ArgumentNullException Thrown when character is null. ArgumentException Thrown when BlazerTech.CharacterManagement.Characters.CharacterBase`2.IsValidCharacter in argument character is false. LayeredCharacter(LayeredCharacter_DTO) Create a new character from a character Data Transfer Object (DTO). public LayeredCharacter(LayeredCharacter.LayeredCharacter_DTO character_DTO) Parameters character_DTO LayeredCharacter.LayeredCharacter_DTO The Data Transfer Object used to create the character. Remarks Used to re-created characters saved in previous sessions. LayeredCharacter(LayeredCharacterTemplateSO) Create Character from Template. public LayeredCharacter(LayeredCharacterTemplateSO template) Parameters template LayeredCharacterTemplateSO Exceptions ArgumentNullException Thrown when template is null. ArgumentException Thrown when template is invalid. LayeredCharacter(string, LayeredCharacterTypeSO, string) Create new blank character. public LayeredCharacter(string characterName, LayeredCharacterTypeSO characterType, string displayName = \"\") Parameters characterName string Name of the new character. characterType LayeredCharacterTypeSO The LayeredCharacterTypeSO the character will use. displayName string Exceptions ArgumentException Thrown when characterType is null or invalid. Properties Layers public IReadOnlyList<CharacterLayer> Layers { get; } Property Value IReadOnlyList<CharacterLayer> Methods ApplySnapshot(LayeredCharacterSnapshot) Set the CharacterLayerOption's inside Layers equal to those inside a LayeredCharacterSnapshot. public void ApplySnapshot(LayeredCharacterSnapshot snapshot) Parameters snapshot LayeredCharacterSnapshot The LayeredCharacterSnapshot to apply to the character. Exceptions ArgumentException LoadCharacterHandler() protected override void LoadCharacterHandler() LoadCharacterHandlerAsync() protected override Task LoadCharacterHandlerAsync() Returns Task OverrideLayerOptions(LayeredCharacter) Sets the characters Layers equal to the same Layers of another LayeredCharacter. public bool OverrideLayerOptions(LayeredCharacter character) Parameters character LayeredCharacter Returns bool PerformValidationCheck() Determines whether the current LayeredCharacter instance is valid, extending the base IsValid checks with additional requirements specific to layered characters. public override bool PerformValidationCheck() Returns bool true if the character passes all validation checks; otherwise, false. Remarks Validation steps: Calls the base IsValid method to validate the CharacterName and CharacterType. Verifies that the CMSInitializationHandler has completed initialization first. Checks that Layers matches the same layer count in CharacterType. See Also IsValid CharacterType Layers RandomizeAllLayers() Randomize every layer in the BlazerTech.CharacterManagement.Characters.LayeredCharacter.layers list. public bool RandomizeAllLayers() Returns bool UnloadCharacterHandler() protected override void UnloadCharacterHandler() Events OnLayerOptionsOverriden public event EventHandler OnLayerOptionsOverriden Event Type EventHandler See Also LayeredCharacterTypeSO CharacterLayerDefinitionSO CharacterLayer"
  },
  "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterGroupManager.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterGroupManager.html",
    "title": "Class LayeredCharacterGroupManager | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterGroupManager Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public static class LayeredCharacterGroupManager Inheritance object LayeredCharacterGroupManager Fields CharacterTypeGroupsAutoSaveTriggers public static CharacterGroupAutoSaveTriggers CharacterTypeGroupsAutoSaveTriggers Field Value CharacterGroupAutoSaveTriggers SavedCharactersDirectory public const string SavedCharactersDirectory = \"BlazerTech Character Management System\" Field Value string SavedCharactersFilename public const string SavedCharactersFilename = \"Saved Characters\" Field Value string groupsByType public static readonly Dictionary<LayeredCharacterTypeSO, CharacterGroupRegistry> groupsByType Field Value Dictionary<LayeredCharacterTypeSO, CharacterGroupRegistry> Methods GetGroupsForType(LayeredCharacterTypeSO) public static CharacterGroupRegistry GetGroupsForType(LayeredCharacterTypeSO type) Parameters type LayeredCharacterTypeSO Returns CharacterGroupRegistry Initialize() public static void Initialize() LoadCharacterGroups() Load previously saved character groups. public static void LoadCharacterGroups() SaveCharacterGroupsImmediate() Saves all character groups to json files. Separated by Character Type. public static void SaveCharacterGroupsImmediate() ScheduleSaveCharacterGroups() calls SaveCharacterGroupsImmediate() on the next frame. public static Task ScheduleSaveCharacterGroups() Returns Task"
  },
  "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterGroupTemplateSO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterGroupTemplateSO.html",
    "title": "Class LayeredCharacterGroupTemplateSO | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterGroupTemplateSO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll A blueprint for a Layered Character Group (Fixed or Flexible) that will automatically be created at runtime. [CreateAssetMenu(menuName = \"BlazerTech/Character Management System/Character Templates/Layered Character Group Template\", fileName = \"New Layered Character Group Template\")] public class LayeredCharacterGroupTemplateSO : ScriptableObject Inheritance object Object ScriptableObject LayeredCharacterGroupTemplateSO Properties CharacterType public LayeredCharacterTypeSO CharacterType { get; } Property Value LayeredCharacterTypeSO CharactersInGroup public GroupTemplateEntry[] CharactersInGroup { get; } Property Value GroupTemplateEntry[] DefaultGroupName public string DefaultGroupName { get; } Property Value string GroupType public MultiCharacterGroupType GroupType { get; } Property Value MultiCharacterGroupType Methods CreateGroup(string) public bool CreateGroup(string GroupNameOverride = \"\") Parameters GroupNameOverride string Returns bool"
  },
  "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterSnapshot.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterSnapshot.html",
    "title": "Class LayeredCharacterSnapshot | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterSnapshot Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll A snapshot of a character that can later be applied to the same character or another of the same LayeredCharacterTypeSO. [Serializable] public class LayeredCharacterSnapshot Inheritance object LayeredCharacterSnapshot Constructors LayeredCharacterSnapshot(LayeredCharacter, string) Create a new snapshot from A LayeredCharacter. public LayeredCharacterSnapshot(LayeredCharacter character, string note = \"\") Parameters character LayeredCharacter The LayeredCharacter to create a snapshot of. note string Properties CharacterType public LayeredCharacterTypeSO CharacterType { get; } Property Value LayeredCharacterTypeSO LayerOptions public IReadOnlyList<CharacterLayerOption> LayerOptions { get; } Property Value IReadOnlyList<CharacterLayerOption> Note A note often containing what was changed. Used when displaying snapshot history in the Character Creator. public string Note { get; } Property Value string"
  },
  "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterTemplateSO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterTemplateSO.html",
    "title": "Class LayeredCharacterTemplateSO | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterTemplateSO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [CreateAssetMenu(menuName = \"BlazerTech/Character Management System/Character Templates/Layered Character Template\", fileName = \"New Layered Character Template\")] public class LayeredCharacterTemplateSO : CharacterTemplateBaseSO<LayeredCharacterTypeSO, LayeredCharacter>, IValidatable Inheritance object Object ScriptableObject CharacterTemplateBaseSO<LayeredCharacterTypeSO, LayeredCharacter> LayeredCharacterTemplateSO Implements IValidatable Inherited Members CharacterTemplateBaseSO<LayeredCharacterTypeSO, LayeredCharacter>.CharacterType CharacterTemplateBaseSO<LayeredCharacterTypeSO, LayeredCharacter>.CharacterName CharacterTemplateBaseSO<LayeredCharacterTypeSO, LayeredCharacter>.CharacterDisplayName CharacterTemplateBaseSO<LayeredCharacterTypeSO, LayeredCharacter>.isValid CharacterTemplateBaseSO<LayeredCharacterTypeSO, LayeredCharacter>.IsValid CharacterTemplateBaseSO<LayeredCharacterTypeSO, LayeredCharacter>.GetOrCreateCharacter() CharacterTemplateBaseSO<LayeredCharacterTypeSO, LayeredCharacter>.CreateNewCharacter() CharacterTemplateBaseSO<LayeredCharacterTypeSO, LayeredCharacter>.PerformValidationCheck() Properties LayerOptionMappings public List<LayerOptionMapping> LayerOptionMappings { get; } Property Value List<LayerOptionMapping> Methods CreateNewCharacter() protected override LayeredCharacter CreateNewCharacter() Returns LayeredCharacter PerformValidationCheck() Checks/Rechecks if the object is valid and updates IsValid accordingly. public override bool PerformValidationCheck() Returns bool true if the object is valid after the check; otherwise, false."
  },
  "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterTypeSO.CharacterCreatorConfig.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterTypeSO.CharacterCreatorConfig.html",
    "title": "Class LayeredCharacterTypeSO.CharacterCreatorConfig | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterTypeSO.CharacterCreatorConfig Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public class LayeredCharacterTypeSO.CharacterCreatorConfig Inheritance object LayeredCharacterTypeSO.CharacterCreatorConfig Fields CharacterPreviewFrameIndex public int CharacterPreviewFrameIndex Field Value int PreviewFrameHeight public int PreviewFrameHeight Field Value int PreviewFrameWidth [Header(\"Layer Option Preview Settings\")] public int PreviewFrameWidth Field Value int Properties BaseLayer public CharacterLayerDefinitionSO BaseLayer { get; set; } Property Value CharacterLayerDefinitionSO BaseLayerDefaultOptionIndex public int BaseLayerDefaultOptionIndex { get; } Property Value int CharacterPreviewAnimationOptions public string[] CharacterPreviewAnimationOptions { get; } Property Value string[] CharacterPreviewController public RuntimeAnimatorController CharacterPreviewController { get; } Property Value RuntimeAnimatorController CharacterPreviewSprite public Sprite CharacterPreviewSprite { get; set; } Property Value Sprite CleanLayerOptionNames public bool CleanLayerOptionNames { get; set; } Property Value bool"
  },
  "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterTypeSO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LayeredCharacterTypeSO.html",
    "title": "Class LayeredCharacterTypeSO | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterTypeSO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [HelpURL(\"https://legendaryswordsman2.github.io/BT-Character-Management-System-Docs/api/BlazerTech.CharacterManagement.Characters.LayeredCharacterTypeSO.html\")] [CreateAssetMenu(menuName = \"BlazerTech/Character Management System/Layered Character Type/Character Layer\", fileName = \"New Layered Character Type\")] public class LayeredCharacterTypeSO : CharacterTypeBaseSO, IValidatable Inheritance object Object ScriptableObject CharacterTypeBaseSO LayeredCharacterTypeSO Implements IValidatable Inherited Members CharacterTypeBaseSO.CharacterTypeID CharacterTypeBaseSO.BaseSpritesheet CharacterTypeBaseSO.CharacterController CharacterTypeBaseSO.IsValid CharacterTypeBaseSO.IsValidCharacterSpriteSheet(Sprite) Properties CharacterCreatorSettings public LayeredCharacterTypeSO.CharacterCreatorConfig CharacterCreatorSettings { get; } Property Value LayeredCharacterTypeSO.CharacterCreatorConfig CharacterMaterial public Material CharacterMaterial { get; } Property Value Material Layers public List<CharacterLayerDefinitionSO> Layers { get; } Property Value List<CharacterLayerDefinitionSO> Methods AcquireAllLayerOptionsAsync(Action<float>) public Task AcquireAllLayerOptionsAsync(Action<float> onProgress = null) Parameters onProgress Action<float> Returns Task Initialize(Material) public bool Initialize(Material characterMaterial) Parameters characterMaterial Material Returns bool IsInResourcesFolder_EditMode() public bool IsInResourcesFolder_EditMode() Returns bool IsInitialized() public bool IsInitialized() Returns bool PerformValidationCheck() Checks/Rechecks if the object is valid and updates IsValid accordingly. public override bool PerformValidationCheck() Returns bool true if the object is valid after the check; otherwise, false. ReleaseAllLayerOptions() public void ReleaseAllLayerOptions()"
  },
  "api/BlazerTech.CharacterManagement.Characters.LoadedCharacterHandlerBase.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.LoadedCharacterHandlerBase.html",
    "title": "Class LoadedCharacterHandlerBase | BlazerTech Character Management System",
    "summary": "Class LoadedCharacterHandlerBase Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public abstract class LoadedCharacterHandlerBase : IDisposable Inheritance object LoadedCharacterHandlerBase Implements IDisposable Derived LayeredCharacter.LoadedLayeredCharacterHandler UnifiedCharacter.LoadedUnifiedCharacterHandler Constructors LoadedCharacterHandlerBase() public LoadedCharacterHandlerBase() Properties CharacterMPB public MaterialPropertyBlock CharacterMPB { get; } Property Value MaterialPropertyBlock Methods Dispose() public abstract void Dispose()"
  },
  "api/BlazerTech.CharacterManagement.Characters.MultiCharacterGroupType.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.MultiCharacterGroupType.html",
    "title": "Enum MultiCharacterGroupType | BlazerTech Character Management System",
    "summary": "Enum MultiCharacterGroupType Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public enum MultiCharacterGroupType Fields FixedGroup = 1 FlexibleGroup = 0"
  },
  "api/BlazerTech.CharacterManagement.Characters.SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO.html",
    "title": "Class SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO | BlazerTech Character Management System",
    "summary": "Class SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public class SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO Inheritance object SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO Constructors SingleSlotCharacterGroup_DTO(LayeredCharacter, string) public SingleSlotCharacterGroup_DTO(LayeredCharacter character, string groupName) Parameters character LayeredCharacter groupName string SingleSlotCharacterGroup_DTO(SingleSlotCharacterGroup) public SingleSlotCharacterGroup_DTO(SingleSlotCharacterGroup primaryCharacterSlot) Parameters primaryCharacterSlot SingleSlotCharacterGroup Fields Character public LayeredCharacter.LayeredCharacter_DTO Character Field Value LayeredCharacter.LayeredCharacter_DTO GroupName public string GroupName Field Value string"
  },
  "api/BlazerTech.CharacterManagement.Characters.SingleSlotCharacterGroup.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.SingleSlotCharacterGroup.html",
    "title": "Class SingleSlotCharacterGroup | BlazerTech Character Management System",
    "summary": "Class SingleSlotCharacterGroup Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [Serializable] public sealed class SingleSlotCharacterGroup : CharacterGroupBase Inheritance object CharacterGroupBase SingleSlotCharacterGroup Inherited Members CharacterGroupBase.GroupName CharacterGroupBase.CharacterType CharacterGroupBase.OnCharacterChanged Constructors SingleSlotCharacterGroup(LayeredCharacterTypeSO, string) public SingleSlotCharacterGroup(LayeredCharacterTypeSO characterType, string groupName = \"Single\") Parameters characterType LayeredCharacterTypeSO groupName string SingleSlotCharacterGroup(SingleSlotCharacterGroup_DTO, LayeredCharacterTypeSO) public SingleSlotCharacterGroup(SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO DTO, LayeredCharacterTypeSO characterType) Parameters DTO SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO characterType LayeredCharacterTypeSO Properties Character public LayeredCharacter Character { get; } Property Value LayeredCharacter Methods AddCharacter(LayeredCharacter) Set or replace the character in the Single Group. public override bool AddCharacter(LayeredCharacter character) Parameters character LayeredCharacter Returns bool True if the new character is successfully added/replaced. False if the new character is null. ContainsCharacter(LayeredCharacter) public override bool ContainsCharacter(LayeredCharacter character) Parameters character LayeredCharacter Returns bool ContainsCharacterWithGUID(Guid) public override bool ContainsCharacterWithGUID(Guid guid) Parameters guid Guid Returns bool ContainsCharacterWithName(string) public override bool ContainsCharacterWithName(string name) Parameters name string Returns bool RemoveCharacter() Remove the singlular character in the group if there is one. public bool RemoveCharacter() Returns bool True if there was a character in the group to remove. Otherwise False."
  },
  "api/BlazerTech.CharacterManagement.Characters.UnifiedCharacter.LoadedUnifiedCharacterHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.UnifiedCharacter.LoadedUnifiedCharacterHandler.html",
    "title": "Class UnifiedCharacter.LoadedUnifiedCharacterHandler | BlazerTech Character Management System",
    "summary": "Class UnifiedCharacter.LoadedUnifiedCharacterHandler Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll public class UnifiedCharacter.LoadedUnifiedCharacterHandler : LoadedCharacterHandlerBase, IDisposable Inheritance object LoadedCharacterHandlerBase UnifiedCharacter.LoadedUnifiedCharacterHandler Implements IDisposable Inherited Members LoadedCharacterHandlerBase.CharacterMPB Constructors LoadedUnifiedCharacterHandler(UnifiedCharacter) public LoadedUnifiedCharacterHandler(UnifiedCharacter character) Parameters character UnifiedCharacter Methods Dispose() public override void Dispose() LoadCharacter() public void LoadCharacter() LoadCharacterAsync() public Task LoadCharacterAsync() Returns Task"
  },
  "api/BlazerTech.CharacterManagement.Characters.UnifiedCharacter.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.UnifiedCharacter.html",
    "title": "Class UnifiedCharacter | BlazerTech Character Management System",
    "summary": "Class UnifiedCharacter Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll Represents a character built from a single, unified spritesheet containg all animations of the character. public class UnifiedCharacter : CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>, IValidatable Inheritance object CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler> UnifiedCharacter Implements IValidatable Inherited Members CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.CharacterType CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.LoadedCharacterHandler CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.CharacterGUID CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.CharacterName CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.CharacterDisplayName CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.IsValid CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.PerformValidationCheck() CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.SetCharacterInvalid() CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.AcquireCharacterHandler(object) CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.AcquireCharacterHandlerAsync(object) CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.ReleaseCharacterHandler(object) CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.LoadCharacterHandler() CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.LoadCharacterHandlerAsync() CharacterBase<UnifiedCharacterTypeSO, UnifiedCharacter.LoadedUnifiedCharacterHandler>.UnloadCharacterHandler() Remarks A UnifiedCharacter is tied to a UnifiedCharacterTypeSO that defines the base spritesheet and animator controller used. Instances are typically created from a UnifiedCharacterTemplateSO, which provides the character’s name, type, and spritesheet reference. Constructors UnifiedCharacter(UnifiedCharacterTemplateSO) public UnifiedCharacter(UnifiedCharacterTemplateSO unifiedCharacterTemplate) Parameters unifiedCharacterTemplate UnifiedCharacterTemplateSO Methods LoadCharacterHandler() protected override void LoadCharacterHandler() LoadCharacterHandlerAsync() protected override Task LoadCharacterHandlerAsync() Returns Task See Also UnifiedCharacterTypeSO UnifiedCharacterTemplateSO"
  },
  "api/BlazerTech.CharacterManagement.Characters.UnifiedCharacterTemplateSO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.UnifiedCharacterTemplateSO.html",
    "title": "Class UnifiedCharacterTemplateSO | BlazerTech Character Management System",
    "summary": "Class UnifiedCharacterTemplateSO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [CreateAssetMenu(menuName = \"BlazerTech/Character Management System/Character Templates/Unified Character Template\", fileName = \"New Character Template\")] public class UnifiedCharacterTemplateSO : CharacterTemplateBaseSO<UnifiedCharacterTypeSO, UnifiedCharacter>, IValidatable Inheritance object Object ScriptableObject CharacterTemplateBaseSO<UnifiedCharacterTypeSO, UnifiedCharacter> UnifiedCharacterTemplateSO Implements IValidatable Inherited Members CharacterTemplateBaseSO<UnifiedCharacterTypeSO, UnifiedCharacter>.CharacterType CharacterTemplateBaseSO<UnifiedCharacterTypeSO, UnifiedCharacter>.CharacterName CharacterTemplateBaseSO<UnifiedCharacterTypeSO, UnifiedCharacter>.CharacterDisplayName CharacterTemplateBaseSO<UnifiedCharacterTypeSO, UnifiedCharacter>.isValid CharacterTemplateBaseSO<UnifiedCharacterTypeSO, UnifiedCharacter>.IsValid CharacterTemplateBaseSO<UnifiedCharacterTypeSO, UnifiedCharacter>.GetOrCreateCharacter() CharacterTemplateBaseSO<UnifiedCharacterTypeSO, UnifiedCharacter>.CreateNewCharacter() CharacterTemplateBaseSO<UnifiedCharacterTypeSO, UnifiedCharacter>.PerformValidationCheck() Properties CharacterSpritesheet public AssetReferenceT<Texture2D> CharacterSpritesheet { get; } Property Value AssetReferenceT<Texture2D> Methods CreateNewCharacter() protected override UnifiedCharacter CreateNewCharacter() Returns UnifiedCharacter"
  },
  "api/BlazerTech.CharacterManagement.Characters.UnifiedCharacterTypeSO.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.UnifiedCharacterTypeSO.html",
    "title": "Class UnifiedCharacterTypeSO | BlazerTech Character Management System",
    "summary": "Class UnifiedCharacterTypeSO Namespace BlazerTech.CharacterManagement.Characters Assembly Assembly-CSharp.dll [CreateAssetMenu(menuName = \"BlazerTech/Character Management System/Unified Character Type\", fileName = \"New Unified Character Type\")] public class UnifiedCharacterTypeSO : CharacterTypeBaseSO, IValidatable Inheritance object Object ScriptableObject CharacterTypeBaseSO UnifiedCharacterTypeSO Implements IValidatable Inherited Members CharacterTypeBaseSO.CharacterTypeID CharacterTypeBaseSO.BaseSpritesheet CharacterTypeBaseSO.CharacterController CharacterTypeBaseSO.IsValid CharacterTypeBaseSO.PerformValidationCheck() CharacterTypeBaseSO.IsValidCharacterSpriteSheet(Sprite)"
  },
  "api/BlazerTech.CharacterManagement.Characters.html": {
    "href": "api/BlazerTech.CharacterManagement.Characters.html",
    "title": "Namespace BlazerTech.CharacterManagement.Characters | BlazerTech Character Management System",
    "summary": "Namespace BlazerTech.CharacterManagement.Characters Classes CharacterBase<TCharacterType, TCharacterHandler> CharacterDraft Wrapper class used when editting characters in the Character Creation Menu CharacterDraft_NewCharacter Wrapper for a newely created character within the Character Creation Menu. Added to a group when saved. CharacterDraft_PreExistingCharacter Wrapper for a pre created character when being edited in the Character Creation Menu. A copy of the character is provided and edited in the menu. Changes to the copy will be applied to the original when saved. CharacterGroupBase CharacterGroupRegistry Holds a collection of three different types of groups. An instance of this class is used for each Layered Character Type. CharacterLayer Represents a single layer of a character within a LayeredCharacter. Wraps a CharacterLayerOption. CharacterLayer.LayerOptionUpdatedEventArgs CharacterLayerDefinitionSO CharacterLayerOption CharacterLayerOption.EquippedCharacterLayerOption_DTO Data Transfer Object (DTO) used to save and load a CharacterLayerOption. CharacterLayerOption.LoadedSpriteDataContainer CharacterTemplateBaseSO<TCharacterType, TCharacter> Base class for all Character Templates. CharacterTypeBaseSO bass Scriptable Object for all Character Types. CharacterTypeGroups_DTO FixedCharacterGroup FixedCharacterGroup.FixedCharacterGroup_DTO FlexibleCharacterGroup FlexibleCharacterGroup.FlexibleCharacterGroup_DTO GroupTemplateEntry LayerOptionMapping References a CharacterLayerOption within a CharacterLayerDefinitionSO by LayerOptionID. LayeredCharacter Represents a character made of multiple modular layers, such as body, outfit, hairstyle, etc. Each layer can be placed on top of each other in order to create the final character. LayeredCharacter.LayeredCharacter_DTO LayeredCharacter.LoadedLayeredCharacterHandler LayeredCharacterGroupManager LayeredCharacterGroupTemplateSO A blueprint for a Layered Character Group (Fixed or Flexible) that will automatically be created at runtime. LayeredCharacterSnapshot A snapshot of a character that can later be applied to the same character or another of the same LayeredCharacterTypeSO. LayeredCharacterTemplateSO LayeredCharacterTypeSO LayeredCharacterTypeSO.CharacterCreatorConfig LoadedCharacterHandlerBase SingleSlotCharacterGroup SingleSlotCharacterGroup.SingleSlotCharacterGroup_DTO UnifiedCharacter Represents a character built from a single, unified spritesheet containg all animations of the character. UnifiedCharacter.LoadedUnifiedCharacterHandler UnifiedCharacterTemplateSO UnifiedCharacterTypeSO Enums CharacterDraftType CharacterGroupAutoSaveTriggers CharacterGroupEntryType CharacterGroupType MultiCharacterGroupType"
  },
  "api/BlazerTech.CharacterManagement.Components.CharacterAnimator.html": {
    "href": "api/BlazerTech.CharacterManagement.Components.CharacterAnimator.html",
    "title": "Class CharacterAnimator | BlazerTech Character Management System",
    "summary": "Class CharacterAnimator Namespace BlazerTech.CharacterManagement.Components Assembly Assembly-CSharp.dll public class CharacterAnimator : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CharacterAnimator Fields Instance public static CharacterAnimator Instance Field Value CharacterAnimator Properties Animator public Animator Animator { get; } Property Value Animator Methods ForceDirection(FourDirectional) public void ForceDirection(FourDirectional newDirection) Parameters newDirection FourDirectional GetCurrentAnimationNormalizedTime() public float GetCurrentAnimationNormalizedTime() Returns float GetParamaterInfo(string) public float GetParamaterInfo(string name) Parameters name string Returns float PlayAnimation(string) public void PlayAnimation(string name) Parameters name string RestartCurrentAnimation() public void RestartCurrentAnimation() SetTrigger(string) public void SetTrigger(string name) Parameters name string"
  },
  "api/BlazerTech.CharacterManagement.Components.CharacterLoaderBase.html": {
    "href": "api/BlazerTech.CharacterManagement.Components.CharacterLoaderBase.html",
    "title": "Class CharacterLoaderBase | BlazerTech Character Management System",
    "summary": "Class CharacterLoaderBase Namespace BlazerTech.CharacterManagement.Components Assembly Assembly-CSharp.dll [DisallowMultipleComponent] public abstract class CharacterLoaderBase : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CharacterLoaderBase Derived LayeredCharacterLoader LayeredCharacterTemplateLoader UnifiedCharacterLoader Fields _animator The Animator to apply the Animator Controller to [SerializeField] [ShowIf(\"setAnimatorController\")] [BoxGroup(\"References\")] protected Animator _animator Field Value Animator _renderer The Renderer to apply the character shader to. [SerializeField] [BoxGroup(\"References\")] protected Renderer _renderer Field Value Renderer isValid protected bool isValid Field Value bool loadCharacterOnStart Toggles if the character should be loaded when the Start method is called. [SerializeField] [BoxGroup(\"Loading\")] protected bool loadCharacterOnStart Field Value bool loadingMode Option to load character asynchronously or synchronously. [SerializeField] [BoxGroup(\"Loading\")] protected CharacterLoaderLoadingMode loadingMode Field Value CharacterLoaderLoadingMode setAnimatorController Toggles if the Animator Controller set in Character Type should be used. [Tooltip(\"Override the animator controller with the one assigned in the Character Type\")] [SerializeField] [BoxGroup(\"References\")] protected bool setAnimatorController Field Value bool Methods GetAndShowCharacter() public abstract Task GetAndShowCharacter() Returns Task OnDestroy() protected virtual void OnDestroy() ReleaseCharacter() protected abstract void ReleaseCharacter() ShowCharacter() protected abstract void ShowCharacter() TrySetCharacterAnimator(CharacterTypeBaseSO) protected void TrySetCharacterAnimator(CharacterTypeBaseSO characterType) Parameters characterType CharacterTypeBaseSO ValidationCheck() protected virtual bool ValidationCheck() Returns bool"
  },
  "api/BlazerTech.CharacterManagement.Components.CharacterLoaderLoadingMode.html": {
    "href": "api/BlazerTech.CharacterManagement.Components.CharacterLoaderLoadingMode.html",
    "title": "Enum CharacterLoaderLoadingMode | BlazerTech Character Management System",
    "summary": "Enum CharacterLoaderLoadingMode Namespace BlazerTech.CharacterManagement.Components Assembly Assembly-CSharp.dll public enum CharacterLoaderLoadingMode Fields Asynchronous = 0 Synchronous = 1"
  },
  "api/BlazerTech.CharacterManagement.Components.CharacterMultiGroupLoadMethod.html": {
    "href": "api/BlazerTech.CharacterManagement.Components.CharacterMultiGroupLoadMethod.html",
    "title": "Enum CharacterMultiGroupLoadMethod | BlazerTech Character Management System",
    "summary": "Enum CharacterMultiGroupLoadMethod Namespace BlazerTech.CharacterManagement.Components Assembly Assembly-CSharp.dll public enum CharacterMultiGroupLoadMethod Fields CharacterIndex = 1 CharacterName = 0 Randomized = 2"
  },
  "api/BlazerTech.CharacterManagement.Components.LayeredCharacterLoader.html": {
    "href": "api/BlazerTech.CharacterManagement.Components.LayeredCharacterLoader.html",
    "title": "Class LayeredCharacterLoader | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterLoader Namespace BlazerTech.CharacterManagement.Components Assembly Assembly-CSharp.dll public class LayeredCharacterLoader : CharacterLoaderBase Inheritance object Object Component Behaviour MonoBehaviour CharacterLoaderBase LayeredCharacterLoader Inherited Members CharacterLoaderBase._renderer CharacterLoaderBase.setAnimatorController CharacterLoaderBase._animator CharacterLoaderBase.loadingMode CharacterLoaderBase.loadCharacterOnStart CharacterLoaderBase.isValid CharacterLoaderBase.TrySetCharacterAnimator(CharacterTypeBaseSO) Properties CharacterGroupName public string CharacterGroupName { get; } Property Value string CharacterIndex public int CharacterIndex { get; } Property Value int CharacterLoadMethod public CharacterMultiGroupLoadMethod CharacterLoadMethod { get; } Property Value CharacterMultiGroupLoadMethod CharacterName public string CharacterName { get; } Property Value string Methods GetAndShowCharacter() public override Task GetAndShowCharacter() Returns Task OnDestroy() protected override void OnDestroy() ReleaseCharacter() protected override void ReleaseCharacter() ShowCharacter() protected override void ShowCharacter() UpdateCharacterMaterialProperties() public void UpdateCharacterMaterialProperties() ValidationCheck() protected override bool ValidationCheck() Returns bool"
  },
  "api/BlazerTech.CharacterManagement.Components.LayeredCharacterTemplateLoader.html": {
    "href": "api/BlazerTech.CharacterManagement.Components.LayeredCharacterTemplateLoader.html",
    "title": "Class LayeredCharacterTemplateLoader | BlazerTech Character Management System",
    "summary": "Class LayeredCharacterTemplateLoader Namespace BlazerTech.CharacterManagement.Components Assembly Assembly-CSharp.dll public class LayeredCharacterTemplateLoader : CharacterLoaderBase Inheritance object Object Component Behaviour MonoBehaviour CharacterLoaderBase LayeredCharacterTemplateLoader Inherited Members CharacterLoaderBase._renderer CharacterLoaderBase.setAnimatorController CharacterLoaderBase._animator CharacterLoaderBase.loadingMode CharacterLoaderBase.loadCharacterOnStart CharacterLoaderBase.isValid CharacterLoaderBase.ValidationCheck() CharacterLoaderBase.TrySetCharacterAnimator(CharacterTypeBaseSO) CharacterLoaderBase.OnDestroy() Methods GetAndShowCharacter() public override Task GetAndShowCharacter() Returns Task ReleaseCharacter() protected override void ReleaseCharacter() ShowCharacter() protected override void ShowCharacter()"
  },
  "api/BlazerTech.CharacterManagement.Components.PlayerMovementController.html": {
    "href": "api/BlazerTech.CharacterManagement.Components.PlayerMovementController.html",
    "title": "Class PlayerMovementController | BlazerTech Character Management System",
    "summary": "Class PlayerMovementController Namespace BlazerTech.CharacterManagement.Components Assembly Assembly-CSharp.dll public class PlayerMovementController : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour PlayerMovementController Fields Instance public static PlayerMovementController Instance Field Value PlayerMovementController Properties CanMove public bool CanMove { get; set; } Property Value bool EnableCrouch public bool EnableCrouch { get; } Property Value bool EnableSprint public bool EnableSprint { get; } Property Value bool IsCrouching public bool IsCrouching { get; } Property Value bool IsMoving public bool IsMoving { get; } Property Value bool IsSprinting public bool IsSprinting { get; } Property Value bool MoveSpeed public float MoveSpeed { get; set; } Property Value float Movement public Vector2 Movement { get; } Property Value Vector2"
  },
  "api/BlazerTech.CharacterManagement.Components.UnifiedCharacterLoader.html": {
    "href": "api/BlazerTech.CharacterManagement.Components.UnifiedCharacterLoader.html",
    "title": "Class UnifiedCharacterLoader | BlazerTech Character Management System",
    "summary": "Class UnifiedCharacterLoader Namespace BlazerTech.CharacterManagement.Components Assembly Assembly-CSharp.dll public class UnifiedCharacterLoader : CharacterLoaderBase Inheritance object Object Component Behaviour MonoBehaviour CharacterLoaderBase UnifiedCharacterLoader Inherited Members CharacterLoaderBase._renderer CharacterLoaderBase.setAnimatorController CharacterLoaderBase._animator CharacterLoaderBase.loadingMode CharacterLoaderBase.loadCharacterOnStart CharacterLoaderBase.isValid CharacterLoaderBase.ValidationCheck() CharacterLoaderBase.TrySetCharacterAnimator(CharacterTypeBaseSO) CharacterLoaderBase.OnDestroy() Methods GetAndShowCharacter() public override Task GetAndShowCharacter() Returns Task ReleaseCharacter() protected override void ReleaseCharacter() ShowCharacter() protected override void ShowCharacter()"
  },
  "api/BlazerTech.CharacterManagement.Components.html": {
    "href": "api/BlazerTech.CharacterManagement.Components.html",
    "title": "Namespace BlazerTech.CharacterManagement.Components | BlazerTech Character Management System",
    "summary": "Namespace BlazerTech.CharacterManagement.Components Classes CharacterAnimator CharacterLoaderBase LayeredCharacterLoader LayeredCharacterTemplateLoader PlayerMovementController UnifiedCharacterLoader Enums CharacterLoaderLoadingMode CharacterMultiGroupLoadMethod"
  },
  "api/BlazerTech.CharacterManagement.Core.CMSInitializationHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.CMSInitializationHandler.html",
    "title": "Class CMSInitializationHandler | BlazerTech Character Management System",
    "summary": "Class CMSInitializationHandler Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll [DefaultExecutionOrder(-100)] [DisallowMultipleComponent] public class CMSInitializationHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CMSInitializationHandler Properties AllInitializationFinished public static bool AllInitializationFinished { get; } Property Value bool CoreInitializationFinished public static bool CoreInitializationFinished { get; } Property Value bool Instance public static CMSInitializationHandler Instance { get; } Property Value CMSInitializationHandler"
  },
  "api/BlazerTech.CharacterManagement.Core.CMSReferenceHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.CMSReferenceHandler.html",
    "title": "Class CMSReferenceHandler | BlazerTech Character Management System",
    "summary": "Class CMSReferenceHandler Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll [DefaultExecutionOrder(-200)] [DisallowMultipleComponent] public class CMSReferenceHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CMSReferenceHandler Properties CharacterPiecesShaders public SerializableDictionary<int, Shader> CharacterPiecesShaders { get; } Property Value SerializableDictionary<int, Shader> CharacterTypes public LayeredCharacterTypeSO[] CharacterTypes { get; } Property Value LayeredCharacterTypeSO[] Instance public static CMSReferenceHandler Instance { get; } Property Value CMSReferenceHandler UnifiedCharacterMaterial public Material UnifiedCharacterMaterial { get; } Property Value Material Methods GetCharacterTypeFromIdentifier(string) public LayeredCharacterTypeSO GetCharacterTypeFromIdentifier(string identifier) Parameters identifier string Returns LayeredCharacterTypeSO GetCharacterTypesAsync() public Task<List<LayeredCharacterTypeSO>> GetCharacterTypesAsync() Returns Task<List<LayeredCharacterTypeSO>> GetLayeredCharacterGroupTemplates() public List<LayeredCharacterGroupTemplateSO> GetLayeredCharacterGroupTemplates() Returns List<LayeredCharacterGroupTemplateSO> GetLayeredCharacterTypes() public List<LayeredCharacterTypeSO> GetLayeredCharacterTypes() Returns List<LayeredCharacterTypeSO> SetCharacterTypes(LayeredCharacterTypeSO[]) public void SetCharacterTypes(LayeredCharacterTypeSO[] characterTypes) Parameters characterTypes LayeredCharacterTypeSO[]"
  },
  "api/BlazerTech.CharacterManagement.Core.CMSSaveSystem.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.CMSSaveSystem.html",
    "title": "Class CMSSaveSystem | BlazerTech Character Management System",
    "summary": "Class CMSSaveSystem Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll public static class CMSSaveSystem Inheritance object CMSSaveSystem Methods LoadFileWholePath<T>(string) public static T LoadFileWholePath<T>(string filePath) where T : class Parameters filePath string Returns T Type Parameters T LoadFile<T>(string) public static T LoadFile<T>(string filePath) where T : class Parameters filePath string Returns T Type Parameters T LoadFilesInFolder<T>(string) public static List<T> LoadFilesInFolder<T>(string folderPath) where T : class Parameters folderPath string Returns List<T> Type Parameters T SaveFile<T>(string, string, T) public static void SaveFile<T>(string filePath, string fileName, T objectToWrite) Parameters filePath string fileName string objectToWrite T Type Parameters T"
  },
  "api/BlazerTech.CharacterManagement.Core.EssentialsLoader.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.EssentialsLoader.html",
    "title": "Class EssentialsLoader | BlazerTech Character Management System",
    "summary": "Class EssentialsLoader Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll public abstract class EssentialsLoader : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour EssentialsLoader Methods Execute() [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)] public static void Execute()"
  },
  "api/BlazerTech.CharacterManagement.Core.ExtensionMethods.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.ExtensionMethods.html",
    "title": "Class ExtensionMethods | BlazerTech Character Management System",
    "summary": "Class ExtensionMethods Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll public static class ExtensionMethods Inheritance object ExtensionMethods Methods GetRandom<T>(IReadOnlyList<T>) Returns a random element from an IReadOnlyList. public static T GetRandom<T>(this IReadOnlyList<T> list) Parameters list IReadOnlyList<T> The IReadOnlyList to pick from. Returns T A random element from the list. Type Parameters T The type of the elements in the list. Exceptions InvalidOperationException Thrown if the list is null or empty."
  },
  "api/BlazerTech.CharacterManagement.Core.FourDirectional.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.FourDirectional.html",
    "title": "Enum FourDirectional | BlazerTech Character Management System",
    "summary": "Enum FourDirectional Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll public enum FourDirectional Fields Down = 0 Left = 2 Right = 3 Up = 1"
  },
  "api/BlazerTech.CharacterManagement.Core.IValidatable.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.IValidatable.html",
    "title": "Interface IValidatable | BlazerTech Character Management System",
    "summary": "Interface IValidatable Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll Defines a contract for classes that can be validated. Implementations expose a validation state via IsValid and provide a method to trigger or refresh that validation state. public interface IValidatable Properties IsValid Gets a value indicating whether the object is currently valid. This value should be updated when PerformValidationCheck() is called. bool IsValid { get; } Property Value bool Methods PerformValidationCheck() Checks/Rechecks if the object is valid and updates IsValid accordingly. bool PerformValidationCheck() Returns bool true if the object is valid after the check; otherwise, false."
  },
  "api/BlazerTech.CharacterManagement.Core.OwnedResourceTracker-1.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.OwnedResourceTracker-1.html",
    "title": "Class OwnedResourceTracker<TResource> | BlazerTech Character Management System",
    "summary": "Class OwnedResourceTracker<TResource> Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll public abstract class OwnedResourceTracker<TResource> Type Parameters TResource Inheritance object OwnedResourceTracker<TResource> Derived CharacterLayerOption Properties Owners public HashSet<object> Owners { get; protected set; } Property Value HashSet<object> Methods AcquireResource(object) Acquires the resource for an owner public virtual TResource AcquireResource(object owner) Parameters owner object Object claiming ownership Returns TResource Managed resource AcquireResourceAsync(object) Acquires the resource for an owner asynchronously public virtual Task<TResource> AcquireResourceAsync(object owner) Parameters owner object Object claiming ownership Returns Task<TResource> Managed resource GetAndLoadResource() protected abstract TResource GetAndLoadResource() Returns TResource GetAndLoadResourceAsync() protected abstract Task<TResource> GetAndLoadResourceAsync() Returns Task<TResource> ReleaseResource(object) public virtual void ReleaseResource(object owner) Parameters owner object UnloadResource() protected abstract void UnloadResource()"
  },
  "api/BlazerTech.CharacterManagement.Core.RotateGO.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.RotateGO.html",
    "title": "Class RotateGO | BlazerTech Character Management System",
    "summary": "Class RotateGO Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll public class RotateGO : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour RotateGO"
  },
  "api/BlazerTech.CharacterManagement.Core.ScriptableObjectMenuPaths.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.ScriptableObjectMenuPaths.html",
    "title": "Class ScriptableObjectMenuPaths | BlazerTech Character Management System",
    "summary": "Class ScriptableObjectMenuPaths Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll public static class ScriptableObjectMenuPaths Inheritance object ScriptableObjectMenuPaths Fields CharacterLayerDefinitionSO_Path public const string CharacterLayerDefinitionSO_Path = \"BlazerTech/Character Management System/Layered Character Type/Layered Character Type\" Field Value string CharacterTemplates public const string CharacterTemplates = \"Character Templates/\" Field Value string LayeredCharacterGroupTemplateSO_Path public const string LayeredCharacterGroupTemplateSO_Path = \"BlazerTech/Character Management System/Character Templates/Layered Character Group Template\" Field Value string LayeredCharacterTemplateSO_Path public const string LayeredCharacterTemplateSO_Path = \"BlazerTech/Character Management System/Character Templates/Layered Character Template\" Field Value string LayeredCharacterType public const string LayeredCharacterType = \"Layered Character Type/\" Field Value string LayeredCharacterTypeSO_Path public const string LayeredCharacterTypeSO_Path = \"BlazerTech/Character Management System/Layered Character Type/Character Layer\" Field Value string Root public const string Root = \"BlazerTech/Character Management System/\" Field Value string UnifiedCharacterTemplateSO_Path public const string UnifiedCharacterTemplateSO_Path = \"BlazerTech/Character Management System/Character Templates/Unified Character Template\" Field Value string UnifiedCharacterTypeSO_Path public const string UnifiedCharacterTypeSO_Path = \"BlazerTech/Character Management System/Unified Character Type\" Field Value string"
  },
  "api/BlazerTech.CharacterManagement.Core.SerializableDictionary-2.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.SerializableDictionary-2.html",
    "title": "Class SerializableDictionary<TKey, TValue> | BlazerTech Character Management System",
    "summary": "Class SerializableDictionary<TKey, TValue> Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll [Serializable] public class SerializableDictionary<TKey, TValue> : Dictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, ISerializationCallbackReceiver Type Parameters TKey TValue Inheritance object Dictionary<TKey, TValue> SerializableDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable ISerializationCallbackReceiver Methods OnAfterDeserialize() Implement this callback to transform data back into runtime data types after an object is deserialized. public void OnAfterDeserialize() OnBeforeSerialize() Implement this callback to transform data into serializable data types immediately before an object is serialized. public void OnBeforeSerialize()"
  },
  "api/BlazerTech.CharacterManagement.Core.SerializableKeyValuePair-2.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.SerializableKeyValuePair-2.html",
    "title": "Class SerializableKeyValuePair<TKey, TValue> | BlazerTech Character Management System",
    "summary": "Class SerializableKeyValuePair<TKey, TValue> Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll [Serializable] public class SerializableKeyValuePair<TKey, TValue> Type Parameters TKey TValue Inheritance object SerializableKeyValuePair<TKey, TValue> Constructors SerializableKeyValuePair(TKey, TValue) public SerializableKeyValuePair(TKey key, TValue value) Parameters key TKey value TValue Properties key public TKey key { get; set; } Property Value TKey value public TValue value { get; set; } Property Value TValue"
  },
  "api/BlazerTech.CharacterManagement.Core.SessionGUIDHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.SessionGUIDHandler.html",
    "title": "Class SessionGUIDHandler | BlazerTech Character Management System",
    "summary": "Class SessionGUIDHandler Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll [DefaultExecutionOrder(-1000)] public class SessionGUIDHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SessionGUIDHandler Fields SessionGUID public static Guid SessionGUID Field Value Guid"
  },
  "api/BlazerTech.CharacterManagement.Core.TwoDirectional.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.TwoDirectional.html",
    "title": "Enum TwoDirectional | BlazerTech Character Management System",
    "summary": "Enum TwoDirectional Namespace BlazerTech.CharacterManagement.Core Assembly Assembly-CSharp.dll public enum TwoDirectional Fields Left = 0 Right = 1"
  },
  "api/BlazerTech.CharacterManagement.Core.html": {
    "href": "api/BlazerTech.CharacterManagement.Core.html",
    "title": "Namespace BlazerTech.CharacterManagement.Core | BlazerTech Character Management System",
    "summary": "Namespace BlazerTech.CharacterManagement.Core Classes CMSInitializationHandler CMSReferenceHandler CMSSaveSystem EssentialsLoader ExtensionMethods OwnedResourceTracker<TResource> RotateGO ScriptableObjectMenuPaths SerializableDictionary<TKey, TValue> SerializableKeyValuePair<TKey, TValue> SessionGUIDHandler Interfaces IValidatable Defines a contract for classes that can be validated. Implementations expose a validation state via IsValid and provide a method to trigger or refresh that validation state. Enums FourDirectional TwoDirectional"
  },
  "api/BlazerTech.CharacterManagement.Editor.Inspectors.CharacterTypeSOEditor.html": {
    "href": "api/BlazerTech.CharacterManagement.Editor.Inspectors.CharacterTypeSOEditor.html",
    "title": "Class CharacterTypeSOEditor | BlazerTech Character Management System",
    "summary": "Class CharacterTypeSOEditor Namespace BlazerTech.CharacterManagement.Editor.Inspectors Assembly Assembly-CSharp-Editor.dll [CustomEditor(typeof(LayeredCharacterTypeSO), true)] public class CharacterTypeSOEditor : NaughtyInspector Inheritance object Object ScriptableObject Editor NaughtyInspector CharacterTypeSOEditor Inherited Members NaughtyInspector.OnEnable() NaughtyInspector.OnDisable() NaughtyInspector.GetSerializedProperties(ref List<SerializedProperty>) NaughtyInspector.DrawSerializedProperties() NaughtyInspector.DrawNonSerializedFields(bool) NaughtyInspector.DrawNativeProperties(bool) NaughtyInspector.DrawButtons(bool) Methods OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/BlazerTech.CharacterManagement.Editor.Inspectors.html": {
    "href": "api/BlazerTech.CharacterManagement.Editor.Inspectors.html",
    "title": "Namespace BlazerTech.CharacterManagement.Editor.Inspectors | BlazerTech Character Management System",
    "summary": "Namespace BlazerTech.CharacterManagement.Editor.Inspectors Classes CharacterTypeSOEditor"
  },
  "api/BlazerTech.CharacterManagement.Editor.Windows.CharacterGroupPreviewWindow.html": {
    "href": "api/BlazerTech.CharacterManagement.Editor.Windows.CharacterGroupPreviewWindow.html",
    "title": "Class CharacterGroupPreviewWindow | BlazerTech Character Management System",
    "summary": "Class CharacterGroupPreviewWindow Namespace BlazerTech.CharacterManagement.Editor.Windows Assembly Assembly-CSharp-Editor.dll public class CharacterGroupPreviewWindow : EditorWindow Inheritance object Object ScriptableObject EditorWindow CharacterGroupPreviewWindow Methods CreateGUI() public void CreateGUI() ShowWindow() [MenuItem(\"Window/BlazerTech/Character Group Previewer Beta\")] public static void ShowWindow()"
  },
  "api/BlazerTech.CharacterManagement.Editor.Windows.CharacterTypeGroupCollectionsViewer.html": {
    "href": "api/BlazerTech.CharacterManagement.Editor.Windows.CharacterTypeGroupCollectionsViewer.html",
    "title": "Class CharacterTypeGroupCollectionsViewer | BlazerTech Character Management System",
    "summary": "Class CharacterTypeGroupCollectionsViewer Namespace BlazerTech.CharacterManagement.Editor.Windows Assembly Assembly-CSharp-Editor.dll public class CharacterTypeGroupCollectionsViewer : EditorWindow Inheritance object Object ScriptableObject EditorWindow CharacterTypeGroupCollectionsViewer Methods GetDisplayText(string) public string GetDisplayText(string input) Parameters input string Returns string ShowWindow() public static void ShowWindow()"
  },
  "api/BlazerTech.CharacterManagement.Editor.Windows.html": {
    "href": "api/BlazerTech.CharacterManagement.Editor.Windows.html",
    "title": "Namespace BlazerTech.CharacterManagement.Editor.Windows | BlazerTech Character Management System",
    "summary": "Namespace BlazerTech.CharacterManagement.Editor.Windows Classes CharacterGroupPreviewWindow CharacterTypeGroupCollectionsViewer"
  },
  "api/BlazerTech.CharacterManagement.Internal.Testing.CMSDebugChangeSceneOnEscape.html": {
    "href": "api/BlazerTech.CharacterManagement.Internal.Testing.CMSDebugChangeSceneOnEscape.html",
    "title": "Class CMSDebugChangeSceneOnEscape | BlazerTech Character Management System",
    "summary": "Class CMSDebugChangeSceneOnEscape Namespace BlazerTech.CharacterManagement.Internal.Testing Assembly Assembly-CSharp.dll public class CMSDebugChangeSceneOnEscape : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CMSDebugChangeSceneOnEscape"
  },
  "api/BlazerTech.CharacterManagement.Internal.Testing.CMSDebugCreateFixedCharacterGroup.html": {
    "href": "api/BlazerTech.CharacterManagement.Internal.Testing.CMSDebugCreateFixedCharacterGroup.html",
    "title": "Class CMSDebugCreateFixedCharacterGroup | BlazerTech Character Management System",
    "summary": "Class CMSDebugCreateFixedCharacterGroup Namespace BlazerTech.CharacterManagement.Internal.Testing Assembly Assembly-CSharp.dll public class CMSDebugCreateFixedCharacterGroup : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CMSDebugCreateFixedCharacterGroup Methods CreateFixedCharacterGroup() [Button(null, EButtonEnableMode.Always)] public void CreateFixedCharacterGroup()"
  },
  "api/BlazerTech.CharacterManagement.Internal.Testing.CMSDebugCreateFlexibleCharacter.html": {
    "href": "api/BlazerTech.CharacterManagement.Internal.Testing.CMSDebugCreateFlexibleCharacter.html",
    "title": "Class CMSDebugCreateFlexibleCharacter | BlazerTech Character Management System",
    "summary": "Class CMSDebugCreateFlexibleCharacter Namespace BlazerTech.CharacterManagement.Internal.Testing Assembly Assembly-CSharp.dll public class CMSDebugCreateFlexibleCharacter : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CMSDebugCreateFlexibleCharacter Methods CreateFlexibleCharacter() [Button(null, EButtonEnableMode.Always)] public void CreateFlexibleCharacter()"
  },
  "api/BlazerTech.CharacterManagement.Internal.Testing.CMSDebugCreateSingleCharacter.html": {
    "href": "api/BlazerTech.CharacterManagement.Internal.Testing.CMSDebugCreateSingleCharacter.html",
    "title": "Class CMSDebugCreateSingleCharacter | BlazerTech Character Management System",
    "summary": "Class CMSDebugCreateSingleCharacter Namespace BlazerTech.CharacterManagement.Internal.Testing Assembly Assembly-CSharp.dll public class CMSDebugCreateSingleCharacter : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CMSDebugCreateSingleCharacter"
  },
  "api/BlazerTech.CharacterManagement.Internal.Testing.LoadingScreenObjectRotation.html": {
    "href": "api/BlazerTech.CharacterManagement.Internal.Testing.LoadingScreenObjectRotation.html",
    "title": "Class LoadingScreenObjectRotation | BlazerTech Character Management System",
    "summary": "Class LoadingScreenObjectRotation Namespace BlazerTech.CharacterManagement.Internal.Testing Assembly Assembly-CSharp.dll public class LoadingScreenObjectRotation : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LoadingScreenObjectRotation"
  },
  "api/BlazerTech.CharacterManagement.Internal.Testing.html": {
    "href": "api/BlazerTech.CharacterManagement.Internal.Testing.html",
    "title": "Namespace BlazerTech.CharacterManagement.Internal.Testing | BlazerTech Character Management System",
    "summary": "Namespace BlazerTech.CharacterManagement.Internal.Testing Classes CMSDebugChangeSceneOnEscape CMSDebugCreateFixedCharacterGroup CMSDebugCreateFlexibleCharacter CMSDebugCreateSingleCharacter LoadingScreenObjectRotation"
  },
  "api/BlazerTech.CharacterManagement.Samples.ActiveMenuHandler.html": {
    "href": "api/BlazerTech.CharacterManagement.Samples.ActiveMenuHandler.html",
    "title": "Class ActiveMenuHandler | BlazerTech Character Management System",
    "summary": "Class ActiveMenuHandler Namespace BlazerTech.CharacterManagement.Samples Assembly Assembly-CSharp.dll [DefaultExecutionOrder(-10)] public class ActiveMenuHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ActiveMenuHandler Fields CloseMenuKey [ShowIf(\"CloseMenuWithInput\")] public KeyCode CloseMenuKey Field Value KeyCode CloseMenuWithInput [Space] public bool CloseMenuWithInput Field Value bool Instance public static ActiveMenuHandler Instance Field Value ActiveMenuHandler menuStack public readonly Stack<GameObject> menuStack Field Value Stack<GameObject> Methods Back() public void Back() OpenMenu(GameObject) public void OpenMenu(GameObject menu) Parameters menu GameObject Events OnAllMenusClosed public event EventHandler OnAllMenusClosed Event Type EventHandler"
  },
  "api/BlazerTech.CharacterManagement.Samples.AssetReferenceScene.html": {
    "href": "api/BlazerTech.CharacterManagement.Samples.AssetReferenceScene.html",
    "title": "Class AssetReferenceScene | BlazerTech Character Management System",
    "summary": "Class AssetReferenceScene Namespace BlazerTech.CharacterManagement.Samples Assembly Assembly-CSharp.dll [Serializable] public class AssetReferenceScene : AssetReference, IKeyEvaluator Inheritance object AssetReference AssetReferenceScene Implements IKeyEvaluator Properties SceneName public string SceneName { get; } Property Value string"
  },
  "api/BlazerTech.CharacterManagement.Samples.Menu.html": {
    "href": "api/BlazerTech.CharacterManagement.Samples.Menu.html",
    "title": "Class Menu | BlazerTech Character Management System",
    "summary": "Class Menu Namespace BlazerTech.CharacterManagement.Samples Assembly Assembly-CSharp.dll public class Menu : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Menu Methods Back() public void Back()"
  },
  "api/BlazerTech.CharacterManagement.Samples.MenuBackRelay.html": {
    "href": "api/BlazerTech.CharacterManagement.Samples.MenuBackRelay.html",
    "title": "Class MenuBackRelay | BlazerTech Character Management System",
    "summary": "Class MenuBackRelay Namespace BlazerTech.CharacterManagement.Samples Assembly Assembly-CSharp.dll public class MenuBackRelay : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour MenuBackRelay Methods Back() public void Back()"
  },
  "api/BlazerTech.CharacterManagement.Samples.SceneChangeRelay.html": {
    "href": "api/BlazerTech.CharacterManagement.Samples.SceneChangeRelay.html",
    "title": "Class SceneChangeRelay | BlazerTech Character Management System",
    "summary": "Class SceneChangeRelay Namespace BlazerTech.CharacterManagement.Samples Assembly Assembly-CSharp.dll public class SceneChangeRelay : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SceneChangeRelay Methods ChangeScene() public void ChangeScene()"
  },
  "api/BlazerTech.CharacterManagement.Samples.ToggleMenuOnInput.html": {
    "href": "api/BlazerTech.CharacterManagement.Samples.ToggleMenuOnInput.html",
    "title": "Class ToggleMenuOnInput | BlazerTech Character Management System",
    "summary": "Class ToggleMenuOnInput Namespace BlazerTech.CharacterManagement.Samples Assembly Assembly-CSharp.dll public class ToggleMenuOnInput : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ToggleMenuOnInput"
  },
  "api/BlazerTech.CharacterManagement.Samples.html": {
    "href": "api/BlazerTech.CharacterManagement.Samples.html",
    "title": "Namespace BlazerTech.CharacterManagement.Samples | BlazerTech Character Management System",
    "summary": "Namespace BlazerTech.CharacterManagement.Samples Classes ActiveMenuHandler AssetReferenceScene Menu MenuBackRelay SceneChangeRelay ToggleMenuOnInput"
  },
  "api/BlazerTech.CharacterManagement.Testing.CharacterTesting.html": {
    "href": "api/BlazerTech.CharacterManagement.Testing.CharacterTesting.html",
    "title": "Class CharacterTesting | BlazerTech Character Management System",
    "summary": "Class CharacterTesting Namespace BlazerTech.CharacterManagement.Testing Assembly Assembly-CSharp.dll public class CharacterTesting : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CharacterTesting"
  },
  "api/BlazerTech.CharacterManagement.Testing.html": {
    "href": "api/BlazerTech.CharacterManagement.Testing.html",
    "title": "Namespace BlazerTech.CharacterManagement.Testing | BlazerTech Character Management System",
    "summary": "Namespace BlazerTech.CharacterManagement.Testing Classes CharacterTesting"
  },
  "api/BlazerTech.CharacterManagement.Utilities.SerializableInterface-1.html": {
    "href": "api/BlazerTech.CharacterManagement.Utilities.SerializableInterface-1.html",
    "title": "Class SerializableInterface<T> | BlazerTech Character Management System",
    "summary": "Class SerializableInterface<T> Namespace BlazerTech.CharacterManagement.Utilities Assembly Assembly-CSharp.dll [Serializable] public class SerializableInterface<T> where T : class Type Parameters T Inheritance object SerializableInterface<T> Properties Interface public T Interface { get; } Property Value T"
  },
  "api/BlazerTech.CharacterManagement.Utilities.SerializableInterfaceDrawer.html": {
    "href": "api/BlazerTech.CharacterManagement.Utilities.SerializableInterfaceDrawer.html",
    "title": "Class SerializableInterfaceDrawer | BlazerTech Character Management System",
    "summary": "Class SerializableInterfaceDrawer Namespace BlazerTech.CharacterManagement.Utilities Assembly Assembly-CSharp-Editor.dll [CustomPropertyDrawer(typeof(SerializableInterface<>), true)] public class SerializableInterfaceDrawer : PropertyDrawer Inheritance object GUIDrawer PropertyDrawer SerializableInterfaceDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters position Rect Rectangle on the screen to use for the property GUI. property SerializedProperty The SerializedProperty to make the custom GUI for. label GUIContent The label of this property."
  },
  "api/BlazerTech.CharacterManagement.Utilities.html": {
    "href": "api/BlazerTech.CharacterManagement.Utilities.html",
    "title": "Namespace BlazerTech.CharacterManagement.Utilities | BlazerTech Character Management System",
    "summary": "Namespace BlazerTech.CharacterManagement.Utilities Classes SerializableInterfaceDrawer SerializableInterface<T>"
  },
  "docs/advanced/creating-characters.html": {
    "href": "docs/advanced/creating-characters.html",
    "title": "| BlazerTech Character Management System",
    "summary": ""
  },
  "docs/built-in-characters.html": {
    "href": "docs/built-in-characters.html",
    "title": "Built In Characters | BlazerTech Character Management System",
    "summary": "Built In Characters Sample modular characters are included within the BlazerTech Character Management System. These characters were made to match the style of the Modern Series created by LimeZu. These characters are modular and consist of 4 layers: Body (7 Options) Outfit (28 Options) Hairstyle (28 Options) Accessory (29 Options) A Layered Character Type and Unified Character Type are pre-setup in the /BlazerTech Modular Characters subfolder. The Unified Character Type contains a few premade characters created by combining random options of each of the 4 layers. Tip Upon the full release of the BlazerTech Character Management System these characters will also be available for purchase separately at a discounted price."
  },
  "docs/character-animation-setup.html": {
    "href": "docs/character-animation-setup.html",
    "title": "Character Animation Setup | BlazerTech Character Management System",
    "summary": "Character Animation Setup"
  },
  "docs/character-creator/character-creator-character-preview.html": {
    "href": "docs/character-creator/character-creator-character-preview.html",
    "title": "Character Preview | BlazerTech Character Management System",
    "summary": "Character Preview The character preview shows a live view of the character the player is customizing. Whenever a layer of the character is modifed, the preview is refreshed automatically. Tip Prefabs Location: Prefabs > Character Creator > Character Preview Core Character Preview Inside the base Character Preview folder is the core prefab as well variations. the core prefab can be used on it's own, or combined with add-on prefabs which add extra functioanlity such as rotation or animation switching button. The Core Character Preview contains the CCMCharacterPreviewHandler component which is responsible for handling and updating the preview. Preview Mode The preview mode determines how the character preview is displayed. Static Uses the Character Preview Sprite assigned in the Character Creator Settings section of the Layered Character Type. Animated Uses the Character Preview Controller assigned in the Character Creator Settings section of the Layered Character Type to animate the character preview. Character Preview Rotation located in the /Character Rotation subfolder are prefabs which add rotation controls to the preview. Setup Instructions: Add the prefab to your scene. Assign the OnClick event for each button to the method CCMCharacterPreviewHandler.RotateCharacterPreview(bool rotateLeft). true → rotate left false → rotate right Note Rotation Controls only work with animated character previews. Character Preview Animation Buttons Located in the /Animation Control subfolder are prefabs for switching between character animations. Three prefabs exist: Animation Buttons [Auto Create] automatically creates a button for each animation in the assigned Character Type at runtime. Animation Buttons [Initialize Existing] Uses animation buttons already in the prefab hierarchy. Logs a warning if not enough buttons exist. Can optionally disable or hide unused buttons. Animation Button Prefab used by the other two prefabs. Cannot be used on it's own. Complete Character Previews Located in the /Complete Previews subfolder are prefabs which combine all elements of the character preview. The core preview. Rotation Buttons Animation Switching Buttons. These Complete Previews are already setup and completely functional. All you need to do is add them to your Character Creation Menu."
  },
  "docs/character-creator/character-creator-character-randomization.html": {
    "href": "docs/character-creator/character-creator-character-randomization.html",
    "title": "Character Randomization | BlazerTech Character Management System",
    "summary": "Character Randomization The character in the Character Creation Menu can be completely randomized by randomizing every layer or randomize only specific layers. Complete Character Randomization This is the simplest option. A button can be setup with the CCM Relay component. The button should call the RandomizeEntireCharacter method on the CCM Relay which will then randomize all layers of the character. Tip A complete randomization button prefab can be located in Prefabs > Character Creator > Randomization > Randomize Character Button Single Layer Randomization Some Layer Selectors include a variant that contains a randomize button that when pressed will randomize that layer of the character. If a Layer Selector does not include a variant with a randomize button; one can be added easily. Add a button component that On Click calls CharacterLayerSelector.RandomizeLayer() Controlled Randomization A controlled randomization button contains extra options to only randomize the selected layers. Tip A prefab is locatated in Prefabs > Character Creator > Randomization > Controlled Randomization Button"
  },
  "docs/character-creator/character-creator-loading-screens.html": {
    "href": "docs/character-creator/character-creator-loading-screens.html",
    "title": "Loading Screens | BlazerTech Character Management System",
    "summary": "Loading Screens The Character Creation Menu takes time to open since it needs to load all layer options. A loading screen can be added to hide the Character Creation Menu and give the player something to look at until the menu is ready. How It Works Just like the Character Creation Menu itself; loading screens are also modular. The CCMLoadingScreenHandler component is the core of the loading screen. It should live outside of the loading screen contents but still within the Character Creation Menu contents since it will be in charge of enabling/disabling the loading screen. The Loading Screen Handler requires a reference to the parent of the loading screen (Named Contents in all prefabs). Optionally a loading finished delay can be added to wait a fixed amount of time after loading is finished before disabling the loading screen. This can be helpful to allow loading bars/text to catch up. Prefabs Tip Prefabs Location: Prefabs > Character Creator > Loading Screen Within the base Loading Screen folder is the Loading Screen Core prefab. This is the bare minimum required for a loading screen. It contains the Loading Screen Handler component and loading screen contents which only contains an image. No additional functionality is included. Loading Screen Component Prefabs Located in the /Loading Screen Components subfolder are prefabs which add additional functionality to the loading screen. These can be added to the Loading Screen Core prefab. Loading Progress Text - Adds progress text indicating how far loading has progressed. Loading Bar - Adds a progress bar which fills up as the loading progresses. Loading Repeating Text - Adds text which cylces through a list of pre-set strings. Note Make sure to set the reference to the Loading Screen Handler after instantiating any loading screen component prefabs. Complete Loading Screen Prefabs Located in the /Complete Loading Screens subfolder are prefabs which contain the Core Loading Screen plus other functionality. Loading Screen [+Text, Bar] Loading Screen Components Note All loading screen components require a reference to the Loading Screen handler. Additional components can be added to a loading screen to add functionality (Note:): CCMLoadingScreenProgressText Adds progress text indicating how far loading has progressed. Requires a TMP Text component reference. Loading String can be modified to change the loading bar text. {0} will be replaced with the loading percentage. Smoothing Speed value can be changed to modify lerp speed through loading progress. CCMLoadingScreenProgressBar Adds a progress bar which fills up as the loading progresses. Requires an image component reference The image components Image Type should be set to filled. The Fill Amount can then be modifed automatically to fill up the progress bar. Smoothing Speed value can be changed to modify loading bar lerp speed through loading progress. LoadingScreenRepeatingText Adds text which cylces through a list of pre-set strings. Requires a TMP Text component reference. A list of strings containing the repeating text must be set. Repeating text cycle duration can be modified (Default = 0.5 seconds)."
  },
  "docs/character-creator/character-creator-menu-controls.html": {
    "href": "docs/character-creator/character-creator-menu-controls.html",
    "title": "Character Creator Menu Controls | BlazerTech Character Management System",
    "summary": "Character Creator Menu Controls Menu Controls are buttons that enhance the functionality of the Character Creation Menu. They include the following: Back/Close menu button. Save Character/Confirm changes button. Reset character button. Randomize character button. The Character Creation Menu Relay Component The CCMRelay component is used to relay methods to the Character Creation Menu Manager. The setup works like this: Add the CCM Relay component to a game object. Add a button component and set the On Click event to call a method on the CCM Relay component. CCM Relay Methods The following are all public methods on the CCM Relay component: DisableMenu() - Disable and close the Character Creation Menu if open. SaveCharacter() - Save the character assigned in the Character Creation Menu and add it to a group if applicable. RandomizeEntireCharacter() - Randomize all layers of the character assigned in the Character Creation Menu. ResetCharacter() - Reset the character in the Character Creation Menu to the state it was in when the menu was first opened. Menu Control Prefabs Tip Prefabs Location: Prefabs > Character Creator > Menu Controls The following prefabs are pre-setup with the above mentioned controls. Menu Controls (Core, Horizontal Group) - Only contains a back and save character button. Menu Controls (Full, Horizontal Group) - Contains back, save character, randomize and reset buttons. All contained in a horizontal layout group. (Menu Controls [Full + Undo_Redo]) - Contains back, save character, randomize and undo/redo buttons for use with the History Tracker component. Menu Controls [Full] - Contains back, save character, randomize and reset buttons in a grid shape."
  },
  "docs/character-creator/character-creator-overview.html": {
    "href": "docs/character-creator/character-creator-overview.html",
    "title": "Character Creator | BlazerTech Character Management System",
    "summary": "Character Creator The Character Creator is a modular prefab based framework for building Character Creation Menus inside your game. It's fully customizable; combine and edit different prefabs to create the exact design you want. Layer Selectors A Layer Selector is any UI element that lets the player change a specific layer of a Layered Character. The following selector types are included. Selector Type Description Dropdown Selector Standard dropdown listing all options for a layer. Carousel Selector Displays the current option with arrows to cycle left/right through other layer options. Grid Selector A grid of preview thumbnails for each layer option. List Selector A vertical or horizontal list of options (optionally with preview images). Tab Selector Works alongside another selector. Clicking a tab switches which layer the other selector controls. Read More → Layer Selector Setup Character Preview The Character Preview shows the character currently being customized. Options include: Static Sprite Preview – Displays the preview sprite defined in the Character Type. Animated Preview – Uses an Animator Controller to play character animations. Animation Swapping – With animated previews, extra animations can be defined in the Character Type. buttons can be auto created for swapping between them. Rotate Character – Add rotation buttons to view the character from different sides. Read More → Character Preview Character History The CCM History Tracker component records every change made in the Character Creator. Each time a layer is modified, a snapshot is stored. Snapshot Limit – Configurable between 1–100 (default: 30). Preserve First Snapshot – Optionally prevent the first snapshot from being overwritten when the limit is reached. Read More → History Tracking System Undo & Redo Use the CCM Timeline Button Handler component on a button to undo or redo changes on the History Tracker component. Read More → History Undo/Redo History Panels A History Panel displays the list of snapshots recorded in the History Tracker. Players can click an entry to revert back to that version of the character. Panel Type Description Text Based Each entry contains text describing what was changed (often in a vertical list). Sprite Based Each entry shows a snapshot preview image (often in a horizontal list). Hybrid Show both text and preview images in each entry. Read More → History Panels Character Randomization Character randomization functionality can be added in multiple differents ways Randomize Button - A simple Randomize button which randomizes all layers of the character. Controlled Randomization - A randomize button with additional options to select which layers to randomize. Layer Specific Randomization - Randomization buttons included in Layer Selectors. Read More → Character Randomization Loading Screens Loading screens hide the Character Creation Menu while it is being setup. They're modular just like the rest of the menu. Elements such as a loading bar or progress text can be easily added or removed at any time. Read More → Loading Screen Other Features Mid-Play Editing – Characters already in use can be edited in the Character Creator. Changes apply immediately after saving. Optional Display Name – Add a name field so players can assign a display name to their character. Reset Button – Restore the character to the state it was in when the menu was first opened."
  },
  "docs/character-creator/character-creator-setup.html": {
    "href": "docs/character-creator/character-creator-setup.html",
    "title": "Character Creator Setup | BlazerTech Character Management System",
    "summary": "Character Creator Setup This page will guide you through the process of implementing your own Character Creation Menu into your game. The Character Creation Menu Manager The CharacterCreationMenuManager is the beating heart of the menu. It lives outside the contents of the menu and should be enabled at all times. It requires two things. Default Character Type - The character type used when enabling the menu. Can be overridden. Menu Contents - Parent game object of the actual Character Creation Menu contents. How to Enable the Menu The Character Creation Menu Manager provides 4 methods to open the menu. Most methods use the Character Grouping System. Learn more about the Character Grouping System here. Method Descripion EnableMenu_PrimaryCharacterSlot Opens the menu using the Primary Character Slot in the Character Type Used. EnableMenu_EditCharacter Open the menu to edit a layered character that already exists. EnableMenu_NewPrimaryCharacterSlot Opens the menu with a new character that overrides the Primary Character slot. EnableMenu_NewCharacterInFlexibleGroup Opens the menu with a new character & puts it inside the provided Flexible Group when saved. Character Creation Menu Events Two Unity Events are exposted in the Character Creation Menu Manager component. On Character Saved Called when the character in the Character Creation Menu is saved. Provides the charater that was saved as an argument. For example you can hook up to this event, when it's invoked call CharacterCreationMenuManager.DisableMenu to disable and close the menu. On Menu Disabled Called after the Character Creation Menu is disabled and closed. You can hook up to this event and when invoked open any other menu you'd like using your own menu system. Premade Character Creation Menus The easiest solution is to use a premade character creation menu. These prefabs contain everything needed for a functional Character Creation Menu. At bare minimum they contain the following: Content Descripion Layer Selectors Used to change layers of the character. Character preview Used to preview the character while editing. Loading Screen Displayed over the Character Creation Menu while it's loading. Save & Back Buttons Used to save character changes or close the menu without saving. Tip Premade Character Creation Menu prefabs location: Prefabs > Character Creator > Premade Menus Premade Menus: Character Creation Menu 1: Carousel Selectors [Initialize Existing] - Includes 4 carousel selectors. Character Preview - Includes rotation & animation change controls. Undo/Redo Buttons. Randomize Entire Character button. Save and Back buttons. Loading Screen - Includes progress bar and text. Character Creation Menu 2: Dropdown Selectors [Initialize Existing]. - Includes 6 dropdown selectors. Character Preview - Includes rotation controls. Loading Screen - Includes progress bar and text. Save & Back buttons. Creating Your Own Character Creation Menu You'll need two game objects. #1 holds the Character Creation Menu Manager component and will manage the menu. SHOULD be enabled at runtime. #2 Holds the actual contents of the menu and is referenced in the Menu Contents field in the Character Creation Menu Manager. Doesn't matter if it's enabled or disabled. Character Creation Menu Contents Use this section as a checklist for everything that can be added to the Character Creation Menu. Starting with the essentials and then bonus features. All parts of the menu are contained as prefabs. These prefabs can be placed anywhere in the character creation menu contents parent. Most do not require any manual references and can be added without any extra setup. Essentials Layer Selectors Lets the player change selected options for each layer of the character. Prefabs Location: Prefabs > Character Creator > Layer Selectors. Choose any folder within there. Within your chosen Layer Selector folder use a prefab within the /Pre-Setup subfolder which contains a set of already setup Layer Selectors. Learn more about Layer Selectors here. Character Preview A character preview lets the player see a live version of the character they're creating. Prefabs Location: Prefabs > Character Creator > Character Preview. Base folder contains the core character preview prefab which can be added to the menu as is. Additional functionality can be added through addon prefabs. Learn more about character previews and addon prefabs here. Menu Controls The two core controls you need are Back and Save Character buttons These can easily be setup without prefabs. Simply add a button and CCMRelay component to a game object. Set the On Click Event of the button to run CCMRelay.DisableMenu() or CCMRelay.SaveCharacter(). Prefabs also exist under Prefabs > Character Creator > Menu Controls. Additional controls can also be setup. Learn more about Menu Controls here. Loading Screen A loading screen hides the menu while it's being setup. Prefabs Location: Prefabs > Character Creator > Loading Screen In the base folder contains the Loading Screen Core which only contains a black screen. Additional addon prefabs are located in the /Loading Screen Components subfolder. Addon prefabs can be added as children of the Loading Screen Core and require a reference to the Loading Screen Handler located in the Loading Screen Core. Pre-setup feature complete loading screen prefabs are located in the /Complete Loading Screens subfolder. Complete loading screens include additional features such as a loading bar/text. Learn more about setting up loading screens here. Bonus Features Character Randomization A simple Randomize all layers button can be setup using a button and the CCM Relay component the same way other Menu Controls are setup. Controlled Randomization can be setup instead. This allows specific layers to be toggled off so only specific layers are randomized. Some Layer Selectors have variants that contain a randomize button to randomize that specific layer. Prefabs for both options are included at Prefabs > Character Creation > Randomization. Read more about character randomization setup here. Character History The CCM History Tacker component can be added to any game object in the Character Creation Menu contents. The History Tracker will track all changes made to the character. History Prefabs are located under Prefabs > Character Creator > History. In the /Undo-Redo subfolder are prefabs which include undo/redo buttons which when pressed can undo or redo changes made to the character. In the /History Panels subfolder are prefabs which include lists that show all changes to the character. Clicking an entry in the list will revert the character. Two History Panel prefabs exist. The first history panel is a vertical list and is text based. Each entry contains text describing what changed. The second history panel is a horizontal list and is sprite based. Every entry contains a preview of the character. Read more about the Character History System here. Character Display Name Field A text input field can be added to let the player set a display name for their character. The display name can later be optionally displayed near the character. Prefabs Location: Prefabs > Character Creator > Character Display Name Field."
  },
  "docs/character-creator/history/character-creator-history-panels.html": {
    "href": "docs/character-creator/history/character-creator-history-panels.html",
    "title": "History Panels | BlazerTech Character Management System",
    "summary": "History Panels A History Panel displays a list of snaphots saved in the History Tracker component for the player to view and restore any changes they've made. Tip Prefabs Location: Prefabs > Character Creator > History > History Panels Panel Type Prefabs History Panel [Text, Vertical List] A vertical, text based list. Each entry displays text containing what changed in the assigned character snapshot. History Panel [Sprite, Horizontal List] A horizontal, sprite based list. Each entry contains a list of sprites, each sprite displays a layer in the assigned character snapshot. Entry Prefabs The following are entries used in the above mentioned panels. History Panel Entry [Text] Entry displaying text which describes what changed in the assigned snapshot. History Panel Entry [Sprite] Entry containing a dynmaic list of sprites. Each sprite displays a layer in the assigned character snapshot. Tip Entry prefabs live in the /History List Entries subfolder. Custom Prefabs You can create your own history panel entry easily. Here are the steps Create a new game object and add the HistoryPanelEntry component. Set the display mode: Text - Requires reference to a text objcet. Sprite - Requires reference to layer preview sprites parent. (The parent game object sprites will be instantiated to) Text And Sprite - Requires both aforementioned references. Add the Toggle component and reference it in the HistoryPanelEntry component. Add an Image component - This will be the background image. Set the Target Graphic on the toggle to the image component. Add a new child game object and add another Image component to it. Name the new child game object something like Highlight. - This game object will only be active when the entry is selected. Set the Graphic on the toggle to the image component on the Highlight game object. Turn your game object into a prefab by dragging it into a folder in the project window. Finally, on the CCMHistoryPanel component which lives on all History Panels, set the Entry Prefab to reference your new prefab. Confused? Checkout one of the pre-existing entry prefabs to see how they're setup."
  },
  "docs/character-creator/history/character-creator-history-tracking-system.html": {
    "href": "docs/character-creator/history/character-creator-history-tracking-system.html",
    "title": "History Tracking System | BlazerTech Character Management System",
    "summary": "History Tracking System The History Tracking System tracks every change made to the character in the Character Creation Menu whlie the menu is open. Changes can then be looked through or undone at anytime. Features Feature Description Automatic Tracking Every change to the character is recorded as a snapshot. Undo/Redo Step backward or forward through the snapshot list. Direct Selection Select any snapshot to instantly restore the character. Snapshot Limit Configurable maximum number of snapshots (1-100, default = 30). History Tracker Component The CCMHistoryTracker component can be added to any game object inside the contents of the Character Creation Menu. Tracks all layer changes made to the character and saves them as a snapshot. A snapshot contains all information required to restore the character to that exact state. Snapshots are saved in a list. Max Snapshots can be set anywhere between 1-100 (Default is 30). When the max amount of snapshots is met, oldest snapshots will start being replaced. The Preserve First Snapshot bool can be toggled which will stop the first snapshot created from being deleted or replaced. UI Integration Undo/Redo Buttons: Buttons can be added which can undo or redo changes you've made. Read More → History Undo/Redo History Panels: Multiple types of panels can be added which display every change made in a clean list. Read More → History Panels"
  },
  "docs/character-creator/history/character-creator-history-undo-redo.html": {
    "href": "docs/character-creator/history/character-creator-history-undo-redo.html",
    "title": "History Undo/Redo | BlazerTech Character Management System",
    "summary": "History Undo/Redo With the History Tracker component setup you can include buttons in your Character Creation Menu that undo or redo changes you've previously setup. Setup Setup is extremely simple: Add the button and CCMTimelineButtonHandler component to any game object. Assign the Button reference to the CCMTimelineButtonHandler component. Set the mode to either Undo or Redo. Set the buttons On Click event to call CCMTimelineButtonHandler.UndoOrRedo. Note A CCM History Tracker component must be present somewhere in the menu contents for the Undo/Redo buttons to be functional. If the undo or redo action is invalid the button will be disabled until valid again. A prefab already exists where everything is already setup. Tip Prefabs Location: Prefabs > Character Creator > History > Undo-Redo"
  },
  "docs/character-creator/layer-selectors/Grid-layer-selector.html": {
    "href": "docs/character-creator/layer-selectors/Grid-layer-selector.html",
    "title": "Grid Layer Selector | BlazerTech Character Management System",
    "summary": "Grid Layer Selector Overview A Grid Layer Selector contains a grid where each element in the grid represents an option of the assigned character layer. When an element is selected it will be applied to the character immediately. Prefabs Tip Location: Prefabs > Character Creator > Layer Selectors > Grid Selector Layer Selector Prefabs Layer Grid Selector [Sprite] – Most common grid selector. Each element in the grid is displayed as a sprite. Layer Grid Selector [Text] – Each element in the grid is displayed as text. Layer Grid Selector [Sprite + Text] - Hybrid. Each element in the grid is displayed as both sprite and text. Layer Grid Selector [Vertical + Title] – Grid is vertical & includes a title with the name of the assigned layer at the top. Pre-Setup Prefabs Pre-setup prefabs already include a Character Layer Selection Manager. These will work out of the box without any extra setup required. Grid Selectors [Auto Create] – Instantiates grid selectors [sprite] at runtime. Uses a Horizontal Layout Group component to sort them. Grid Selectors [Initialize Existing] – Uses grid selectors already present in the prefab hierarchy. Grid Entries A grid entry is referenced in a Layer Grid Selector and defines how each entry in the grid looks and functions. They live in the /Grid Entries subfolder. The following are pre-created entries that can be used in any Layer Grid Selector: Layer Option Grid Element [Sprite] - Displays only a sprite preview of what the layer option looks like. Layer Option Grid Element [Text] - Displays only text containing the name of the assigned layer option. Layer Option Grid Element [Text + Sprite] Displays text containing the name of the assigned layer option & a preview of what the layer option looks like. Customization Names – If grid elements have a display mode of text they can use either raw spritesheet names or cleaned up names. Toggleable in the Character Creator Settings for each Character Type. Styling everything can be freely modified (Change sprites, fonts, colors, etc) including the grid and individual element backgrounds. Limitations The grid can be quite big and clunky at times. Works best when used with a Tab Layer Selector."
  },
  "docs/character-creator/layer-selectors/carousel-layer-selector.html": {
    "href": "docs/character-creator/layer-selectors/carousel-layer-selector.html",
    "title": "Carousel Layer Selector | BlazerTech Character Management System",
    "summary": "Carousel Layer Selector Overview A Carousel Layer Selector displays the currently selected layer option and contains left/right buttons to cycle through other options available for the assigned layer. Prefabs Tip Location: Prefabs > Character Creator > Layer Selectors > Carousel Selector Layer Selector Prefabs Layer Carousel Selector – Basic carousel selector. Layer Carousel Selector [+Randomize] – Includes a randomize button next to the carousel. Layer Carousel Selector [-Background] - Basic carousel selector without a background. Pre-Setup Prefabs Pre-setup prefabs already include a Character Layer Selection Manager. These will work out of the box without any extra setup required. Carousel Selectors [Auto Create] – Instantiates carousel selectors at runtime. Uses a Grid Layout Group component to sort them. Carousel Selectors [Initialize Existing] – Uses carousel selectors already present in the prefab hierarchy. Customization Names – Can use either raw spritesheet names or cleaned up names. Toggleable in the Character Creator Settings for each Character Type. Randomization – The “[+Randomize]” prefab adds a randomize option for the current layer. Styling The carousel selector can be freely modified (Change sprites, fonts, colors, etc) Limitations The Carousel Layer Selector only shows text. If you need visual previews, consider the Grid Layer Selector or List Layer Selector."
  },
  "docs/character-creator/layer-selectors/dropdown-layer-selector.html": {
    "href": "docs/character-creator/layer-selectors/dropdown-layer-selector.html",
    "title": "Dropdown Layer Selector | BlazerTech Character Management System",
    "summary": "Dropdown Layer Selector Overview A Dropdown Layer Selector is a standard dropdown UI element. When opened, it displays a list of all available options for the assigned character layer. Prefabs Tip Location: Prefabs > Character Creator > Layer Selectors > Dropdown Selector Layer Selector Prefabs Layer Dropdown Selector – Basic dropdown selector. Layer Dropdown Selector [+Randomize] – Includes a randomize button next to the dropdown. Pre-Setup Prefabs Pre-setup prefabs already include a Character Layer Selection Manager. These will work out of the box without any extra setup required. Dropdown Selectors [Auto Create] – Instantiates dropdown selectors at runtime. Uses a Grid Layout Group component to sort them. Dropdown Selectors [Initialize Existing] – Uses dropdown selectors already present in the prefab hierarchy. Customization Names – Can use either raw spritesheet names or cleaned up names. Toggleable in the Character Creator Settings for each Character Type. Randomization – The “[+Randomize]” prefab adds a randomize option for the current layer. Styling The dropdown can be freely modified (Change sprites, fonts, colors, etc) Limitations The Dropdown Layer Selector only shows text. If you need visual previews, consider the Grid Layer Selector or List Layer Selector."
  },
  "docs/character-creator/layer-selectors/layer-selector-setup.html": {
    "href": "docs/character-creator/layer-selectors/layer-selector-setup.html",
    "title": "Layer Selector Setup | BlazerTech Character Management System",
    "summary": "Layer Selector Setup Not sure what a Layer Selector is? Read More → Layer Selectors Character Layer Selection Manager A Layer Selector cannot function on its own. The most common way to use Layer Selectors is through the CCMCharacterLayerSelectionManager component. This manager is responsible for connecting UI Layer Selectors to the Character Creation Menu. Initialization Modes The Character Layer Selection Manager supports two initialization modes: 1. Auto Create At runtime, the manager will instantiate new layer selectors for each character layer. Requires assigning a Character Layer Selector Prefab. Each layer selector instance is linked automatically to a layer. 2. Initialize Existing Use pre-existing layer selectors already placed in the scene. Each selector is initialized with a character layer at runtime. Extra selectors (more than the number of layers) can optionally be hidden or disabled. Layer Selector Parent Regardless of the initialization mode, a Layer Selector Parent is required: This should be the parent GameObject that contains all layer selectors. In Initialize Existing mode, place all pre-made layer selectors as children of this parent. In Create New mode, new selectors will be instantiated as children of this parent. Layer Selector Prefabs Tip All Layer Selector prefabs can be found under: BlazerTech Character Management System > Prefabs > Character Creator > Layer Selectors . Subfolders exist for each individual Layer Selector. Each Layer Selector exists as a prefab and is organized into its own folder with the following structure: Base Folder Contains the core Layer Selector prefab and any variant prefabs. Pre-Setup Folder Contains prefabs that already include a configured Character Layer Selection Manager. Two versions are provided: Auto Create – Instantiates Layer Selectors at runtime. Initialize Existing – Uses Layer Selectors already present in the prefab hierarchy. This makes it easy to either drop in a ready-to-use prefab or build a custom setup. Character Layer Selection Manager Setup If you want to setup a Character Layer Selection Manager yourself without using a prefab follow these steps: Add the CCMCharacterLayerSelectionManager component to your UI object. Assign the Layer Selector Parent. Choose an Initialization Mode: Create New → Provide a Character Layer Selector Prefab. Initialize Existing → Place selectors as children under the parent. Run the scene, selectors will now control the layers of the active character."
  },
  "docs/character-creator/layer-selectors/list-layer-selector.html": {
    "href": "docs/character-creator/layer-selectors/list-layer-selector.html",
    "title": "List Layer Selector | BlazerTech Character Management System",
    "summary": "List Layer Selector Overview A List Layer Selector contains a vertical list where each element in the grid represents an option of the assigned character layer. When an element is selected it will be applied to the character immediately. Prefabs Tip Location: Prefabs > Character Creator > Layer Selectors > List Selector Layer Selector Prefabs Layer List Selector – Most common list selector. Each element in the list is displayed as a both text & sprite. Layer List Selector [+Title] – Same as #1 but includes a title with the name of the assigned layer at the top. Pre-Setup Prefabs Pre-setup prefabs already include a Character Layer Selection Manager. These will work out of the box without any extra setup required. List Selectors [Auto Create] – Instantiates list selectors [+Title] at runtime. Uses a Horizontal Layout Group component to sort them. List Selectors [Initialize Existing] – Uses list selectors already present in the prefab hierarchy. List Entries A list entry is referenced in a Layer List Selector and defines how each entry in the list looks and functions. They live in the /List Entries subfolder. The following are pre-created entries that can be used in any Layer List Selector: Layer Option List Element [Text] - Displays only text containing the name of the assigned layer option. Layer Option List Element [Text + Sprite] Displays text containing the name of the assigned layer option & a preview of what the layer option looks like. Customization Names – Can use either raw spritesheet names or cleaned up names. Toggleable in the Character Creator Settings for each Character Type. Styling everything can be freely modified (Change sprites, fonts, colors, etc) including the list and individual element backgrounds. Limitations The list can take up a lot of space whem multiple are used at a time. Works best when used with a Tab Layer Selector."
  },
  "docs/character-creator/layer-selectors/tab-layer-selector.html": {
    "href": "docs/character-creator/layer-selectors/tab-layer-selector.html",
    "title": "Tab Layer Selector | BlazerTech Character Management System",
    "summary": "Tab Layer Selector A Tab Layer Selector won't do much on it's own. It must be paired with another Layer Selector. When a Tab Layer Selector is pressed it will change the selected layer in the Character Layer Selection Manager which can then be used to change the assigned layer of another selector. Note The Tab Layer Selector was designed to work with Grid Layer Selectors & List Layer Selectors originally but can work with any Layer Selector. Prefabs Tip Location: Prefabs > Character Creator > Layer Selectors > Tab Selector Layer Selector Prefabs Layer Tab Selector – Basic tab selector (Just a button). Pre-Setup Prefabs Pre-setup prefabs already include a Character Layer Selection Manager. These will work out of the box without any extra setup required. Dropdown Selectors [Initialize Existing] – Uses tab selectors already present in the prefab hierarchy. Note No [Auto Create] variant is available for tab layer selectors because they require a reference to the Character Layer Selection Manager which must be set manually. This means they cannot be created automatically at runtime. Setting up the second Layer Selector The CCMSelectedlayerTabHandler component can be used to change the assigned layer of another selector to the one selected in the Character Layer Selection Manager. It takes two references: Character Layer Selection Manager - Used to detect when the selected layer has been changed. Layer Selector - Any type of layer selector can be used. It will automatically be updated to use the layer selected in the Character Layer Selection Manager. Customization Styling The tab layer selector can be freely modified (Change background sprite, font, colors, etc)."
  },
  "docs/character-grouping-system.html": {
    "href": "docs/character-grouping-system.html",
    "title": "Character Grouping System | BlazerTech Character Management System",
    "summary": "Character Grouping System Character groups are a convenient way to store/sort characters. They are for Layered Characters only. Characters in a group are automatically saved to disk and loaded again next session. The Primary Character Slot Every Character Type contains a Primary Character Slot which can hold a singular character. This is useful for simple setups where only one character is used. The main use for the Primary Character Slot is for use with the Character Creation Menu. The menu can be opened using the character contained within the Primary Character Slot. Group Types There are two types of groups: Flexible Group Type A dynamic list. Characters can be added, removed or edited at any time. Flexibe Groups are great when you want the player to have full control of the list. For example a list of playable characters with the ability for the player to create new characters. API Fixed Group Type A list of a pre-determined amount of characters. The number is set when the list is created and all characters are created immedietely. Characters within the list can be edited at anytime but cannot be removed and new characters cannot be added. Best for situations where an immutable list is needed. Such as a set of pre-created characters the player can edit the designs of but not change the count. Or a set of playable characters the player can choose from. API Character Group Registries The CharacterGroupRegistry is a wrapper class. An instance of this class exists for each Layered Character Type. This wrapper class holds the Primary Character Slot as well as all flexible and fixed groups created for the same Layered Character Type. Character Group Manager The LayeredCharacterGroupManager is a static class which handles all groups. The Layered Character Group Manager contains a dictionary of type CharacterGroupRegistry. One entry for each Layered Character Type used. The LayeredCharacterGroupManager.GetGroupRegistryForType(LayeredCharacterTypeSO type) method can be used to retrieve the registry for a specific Character Type. Character Group Templates A Layered Character Group Template is a scriptable object. It is a blueprint for creating a flexible or fixed group during runtime. To create a Layered Character Group Template right click the project window and navigate to Create > BlazerTech > Character Management System > Character Templates > Layered Character Group Template Tip If a Layered Character Group Template is placed inside a folder titled Resources the group will be automatically created at runtime. Fields Default Group Name - The name of the group when it's created. Can be overriden. Character Type - The Character Type the group will be for when created. Group Type - The type of group that will be created. Flexible or Fixed. Character In Group A list of all characters that will be created and put in the group when the group is created. Each entry has two options: New Character Creates a new character with the supplied name. Character Template Creates a new character using the supplied Layered Character Template."
  },
  "docs/character-layers.html": {
    "href": "docs/character-layers.html",
    "title": "Character Layers | BlazerTech Character Management System",
    "summary": "Character Layers A Character Layer is a Scriptable Object that contains all available character spritesheets for a specific layer of a character. To create a layer right click the project window and navigate to Create > BlazerTech > Character Management System > Layered Character Type > Character Layer After the Character Layer has been created make sure to add it to the layers list inside your Layered Character Type. Important Only the Layered Character Type must be placed in a Resources folder. Everything else including Character Layers should be placed outside the Resources folder! Character Layer Options A Character Layer Option is a wrapper for a character spritesheet which allows for easy loading/unloading of the spritesheet when needed. A list of Layer Options is kept in every Character Layer. The list represents all valid character spritesheets for a specific layer of the character. Caution All spritesheets used as layer options must be the exact same size as the Base Spritesheet set in the Layered Character Type or they will be invalid! Layer Options are not added to the list manually. Instead go to the spritesheet you want to be included as an option for that layer and mark it as an Addressable in the Inspector. Then give it a label. Make sure the label the sprite has is the same label assigned in the Layer Asset label field of the Character Layer asset you created. Tip You can mark an entire folder as addressable and give it a tag which will automatically be applied to everything in the folder. Once all your spritesheets are marked as addressable and have the correct tag, go back to your character layer asset and click the Collect Layer Options button to populate the Layer Options List. Tip The Layered Character Type also contains a Collect Layer Options button which will collect layer options for all layers in the Layers list. Fields Attached Character Type The Layered Character Type the layer is meant to be used for. Layer Name The name of the layer. Used in the Character Creator when displaying character layer names. Does NOT need to be unique. Layer Asset Label The Addressables label used to collect spritesheets and load them into Layer Options. The Character Management System uses Unitys Addressables package to dynamically load/unload sprites when needed. Select the label you'd like to use and make sure all character spritesheets meant to be used for this layer are marked as Addressable and have the same label. Include None Option if toggled a blank option will be added to the list of Layer Options. This will essentially allow a character to be created without using that layer since if the blank option is chosen, an empty sprite will be used. Buttons Collect Layer Options Finds all sprites matching the Layer Asset Label and are the same size as the Base Spritesheet. If so it gets added it to the Layer Options list. Clear Options List Clears the Layer Options list. Tip Can be undo using control/command + Z"
  },
  "docs/character-templates.html": {
    "href": "docs/character-templates.html",
    "title": "Character Templates | BlazerTech Character Management System",
    "summary": "Character Templates A Character Template is a blueprint for creating characters from a defined Character Type. They provide an easy way to use characters anywhere in your project. Shared Fields Fields required by all Character Templates. Field Type Description Character Type UnifiedCharacterTypeSO / LayeredCharacterTypeSO Reference to the Character Type this template is based on. API Character Name String Name for characters created from this template (does not need to be unique). API Character Display Name String Optional display name shown for characters created from this template. API Unified Character Template Setup A blueprint used to create a Unified Character at runtime. Can be used in the Unified Character Loader component. Tip To create a Unified Character Template: Right-click in the Project window → Create > BlazerTech > Character Management System > Character Templates > Unified Character Template Fields Field Type Description Character Spritesheet AssetReferenceT<Texture2D> Reference to a spritesheet the same size as the Base Spritesheet in the Character Type. When referenced, the spritesheet is marked as Addressable, allowing it to be loaded/unloaded during runtime. API Layered Character Template Setup A blueprint used to create a Layered Character at runtime. Can be used in the Layered Character Template Loader component. Tip To create a Layered Character Template: Right-click in the Project window → Create > BlazerTech Character Management System > Layered Character Type Once the Character Type reference is set, a list of all layers from the referenced type will appear. Each layer includes: Dropdown – Select which option to use for the layer. Search bar – Narrow results if the list is large. Buttons Recreate List – Rebuilds the layers list and resets all values."
  },
  "docs/character-type-core.html": {
    "href": "docs/character-type-core.html",
    "title": "Character Type Core | BlazerTech Character Management System",
    "summary": "Character Type Core This page goes over the core functionality of a character type which both Unified & Layered Character Types inherit from. Don’t know what a Character Type is? Read More → Character Types Character Type ID Field Type Description CharacterTypeID String A unique identifier for this Character Type. Must be unique across all types. Warning A Character Type with the same ID as another will fail to initialize and all characters of that type will also fail to load. API Base Spritesheet Field Type Description BaseSpritesheet Spritesheet The main spritesheet used for all characters of this type. Every character spritesheet must match its dimensions exactly. Warning Character Spritesheets of a different size will be rejected, and a warning will be logged. Sprites from the Base Spritesheet will be used whenever using any character of the same Character Type. A shader will be applied that visually overrides the spritesheet with the spritesheet(s) used by the assigned character. Setup The Base Sprite has a Sprite Mode which defines if the image should be used as a singular sprite or split into individual sprites. In this case we want to set the Sprite Mode to Multiple so we can use each frame of the spritesheet individually. Checkout the next section (Character Controller) to learn how sprites from the Base Spritesheet can animated. API Character Controller Property Type Description CharacterController RuntimeAnimatorController An Animator Controller that animates all characters of this Character Type. Note This field is optional. An Animator Controller can be created and used to switch between different animations. Animation Clips inside this controller should use sprites from the BaseSpritesheet. This Animator Controller can then be referenced in the CharacterController field inside your Character Type Tip When using a Character Loader component, this Animator Controller will be applied automatically if Set Animator Controller is enabled. See Character Usage for more info. API"
  },
  "docs/character-types.html": {
    "href": "docs/character-types.html",
    "title": "Character Types | BlazerTech Character Management System",
    "summary": "Character Types Character types are Scriptable Objects that define core aspects of a character. They are the heart of the Character Management System. Note All characters Require a Character Type. Character Type Base All Character Types inherit from CharacterTypeBaseSO, which contains the core properties shared across all Character Types. Core Character Type Properties The following properties are shared across all character types. Property Type Description CharacterTypeID String A unique identifer BaseSpritesheet Sprite The default character spritesheet CharacterController RuntimeAnimatorController The Animator Controller used Read More → Character Type Core Character Type Variants Variant Modularity Best For Unified Single spritesheet Pre-created, fixed characters Layered Layered spritesheets Modular, editable characters 1. Unified Character Type characters use a single spritesheet containing the fully assembled character. No runtime customization is possible. Use Case: Characters with fixed, pre-created appearances. Example: Simplistic characters where their appearance is pre-determined and won't need to be changed. Read More → Unified Character Type 2. Layered Character Type Characters consist of a set of spritesheets, each containing one visual layer of the character. Use Case: Customizable player characters or dynamically generated NPCs. Example: Body, Outfit, Hairstyle, Accessory. Read More → Layered Character Type"
  },
  "docs/character-usage.html": {
    "href": "docs/character-usage.html",
    "title": "Character Usage | BlazerTech Character Management System",
    "summary": "Character Usage The following scripts can be used to load and use characters Layered Character Loader - Load pre-existing Layered Characters. Layered Character Template Loader - Create/load a layered character from a template. Unified Character Loader - Load a Unified Character from a template. The Character Shader A shader is how the final character is displayed. Sprites from the Base Spritesheet in a Character Type are rendered in a component such as a Sprite Renderer or used in an Animator Controller. If a Unified Character is used, the shader takes the single spritesheet of the character and shows that over the Base Spritesheet. If a Layered Character is used, the shader combines all layers into the final rendered character. Note If a Character Loader is used the shader will be applied automatically. Character Loaders Character loading scripts can be used to load any character you've created regardless of the type. All Character Loaders have the following fields: References Field Type Description Renderer Renderer Reference to a Renderer component such as a Sprite Renderer. Used to apply shader. Set Animator Controller Bool Toggle if the Animator Controller referenced in the Character Type should be applied to animate the character. Animator Animator Reference to an Animator component to apply the animator controller. Only shown if Set Animator Controller is true. Loading Settings Field Type Description Loading Mode Enum Option to load character asynchronously or synchronously. Load Character On Start Bool if true the the character will be loaded when the Start method is called. Unified Character Loader Requirements: Have a Unified Character Type and at least one Unified Character Template Setup. The Unified Character Loader component can be used to create and load a character from a Unified Character Template. Add the script to a game object. Set Renderer and optionally Animator references. Set Loading Settings. Reference the Unified Character Template you want to load. Play your game and if Load Character On Start is toggled, your character will be displayed. Layered Character Loaders Layered Character Loader Requirements: Have a Layered Character Type setup and at least one Layered Character saved in a group. Read More → Character Groups The Layered Character Loader component can be used to load Layered Characters from a Character Group. Add the script to a game object. Set Renderer and optionally Animator references. Set Loading Settings. Reference the Character Type you want to load a character from. Set the Character Group you want to load your character from within the Character Type. Character Groups After a Character Type has been referenced, you can choose which group you want to load a Layered Character from: Group Type Description Primary Character Slot A single character contained in the Character Type. No additional parameters required. Flexible Group A group of characters that can be added, removed, or edited at any time. Fixed Group A group with a preset number of characters. New characters cannot be added or removed after creation. If Flexible Group or Fixed Group is selected, the following parameters are required: Parameter Type Description Character Group Name String A unique name used to find the fixed or flexible group. Character Load Method Enum Determines how a character is selected from the group: - Character Name → Load a character by its saved name. - Character Index → Load a character by its index position in the group. - Randomized → Randomly load a character from the group. Layered Character Template Loader Requirements: Have a Layered Character Type and at least one Layered Character Template Setup. The Layered Character Template Loader component can be used to create and load a character from a Layered Character Template. Add the script to a game object. Set Renderer and optionally Animator references. Set Loading Settings. Reference the Layered Character Template you want to load. Play your game and if Load Character On Start is toggled, your character will be displayed."
  },
  "docs/getting-started/basic-concepts.html": {
    "href": "docs/getting-started/basic-concepts.html",
    "title": "Basic Concepts | BlazerTech Character Management System",
    "summary": "Basic Concepts This page introduces the core principles of the Character Management System: Character Types – Define how characters are structured. Character Templates – Blueprints for creating characters later. Character Usage – Scripts to load and manage characters. Built-in Modular Characters - Modular characters pre-setup and ready for use. Character Grouping System - Groups used to store and saved characters. Character Creator – Modular UI framework for building customizable characters in-game. Character Types A Character Type is a Scriptable Objects that defines how a character works. There are two kinds: Type Description Best For Unified Character Type A single spritesheet containing a fully assembled character. No runtime customization. Characters with fixed, pre-set appearances. Layered Character Type Multiple spritesheets, each containing one visual layer (body, outfit, hair, etc.). Customizable player characters, dynamic or randomized NPCs. Read More → Character Types Read More → Unified Character Type Read More → Layered Character Type Character Templates A Character Template is a Scriptable Object that acts as a blueprint for creating characters later. Templates are supported for both Unified and Layered Characters. Read More → Character Templates Character Usage Character Loader Components Once a Unified or Layered Character has been created, it can be loaded using one the following scripts: Loader Purpose Layered Character Loader Load pre-existing Layered Characters. Layered Character Template Loader Create/load a Layered Character from a template. Unified Character Loader Create/load a Unified Character from a template. Character Shader Shaders are how the final Unified or Layered Character are rendered. Sprites from the Base Spritesheet defined in the Character Type are used in a renderer component such as a Sprite Renderer. If a Unified Character is used, the shader takes the single spritesheet of the character and shows that over the Base Spritesheet. If a Layered Character is used, the shader combines all layers into the final rendered character. Read More → Character Usage Built-in Characters Named BlazerTech Layered Characters, they are included with the BlazerTech Character Management System. However they can also be bought separately at a discounted price. They are Modular characters made of 4 different layers. Layers include: Body Outfit Hairstyle Accessory A Layered Character Type for these characters is already included and fully setup. They are ready to be used in any project. Additionally a Unified Character Type is setup with a set of pre-made characters made by combining various layer options. Character Grouping System Charcter groups are used to sort characters. They're great for organizing characters into meaningful collections, whether that's for a dynamic roster or a fixed group size. Read More → Character Grouping System Two types of groups exist. Flexible Group Type A dynamic list that characters can be added to, removed from, or edited at anytime. Example Uses: A roster of playable characters the player can create, edit, and delete. A collection of background NPCs that will later be randomly selected from. Read More → Flexible Group Type Fixed Group Type An immutable list of characters. When the list is created all characters are created immedietely. Characters can then be edited but not removed and new characters cannot be added. Example Uses: A predined set of characters the player can choose to play as. A set of main characters the player can customize. Read More → Fixed Group Type Character Creator The Character Creator is a prefab based Character Creation Menu Framework. Prefabs can be combined and customized to create whatever design you want. It makes the process of building a Character Creation Menu into your game easy. Tip The Character Creator only works with Layered Characters. Unified Characters do not support runtime customization. Example Use Cases Customizable Player Character – Easily setup the menu for a single character such as the player character. Editing Character Lists – Allow players to edit a predefined roster, or manage a dynamic list (create, edit, delete). Key Features Feature Description Layer Selectors Dropdowns, carousels, tabs, etc. Character Preview Static or animated, with options to rotate or swap animations. History Tracking Every change is logged and can be shown as text or image snapshots. Randomization Randomize the entire character or specific layers. Loading Screens Customizable loading screens which hide the menu until it's ready. Character Naming Optional name field. Read More → Character Creator"
  },
  "docs/getting-started/installation-and-requirements.html": {
    "href": "docs/getting-started/installation-and-requirements.html",
    "title": "Installation and Requirements | BlazerTech Character Management System",
    "summary": "Installation and Requirements This guide covers the requirements and installation steps for the BlazerTech Character Management System (BT-CMS). Required Packages Note All required packages must be installed and correctly configured before importing BT-CMS. Package Purpose Notes / Links Addressables Dynamically load/unload character spritesheets. Found in the Unity Registry via Package Manager. Naughty Attributes Adds additional attributes to the Unity Inspector. Installation Guide Unity Asset Store Link Important Addressables Settings file must be created before importing BT-CMS. If not created beforehand the included characters will not be functional. To create the settings file navigate to: Window > Asset Management > Addressables > Groups > Create Addressables Settings. Installation Steps prerequisites Make sure Naughty Attributes and Addressables are both installed and the Addressables Settings file has been creeated (See above^^). Importing Itch.io: If bought from Itch.io, download BlazerTech Character Management System.unitypackage and drag and drop it into your project. Unity Asset Store: If bought from the Unity Asset Store, navigate to Window > Package Manager > My Assets and find BlazerTech Character Management System from within the list. Click Download if not already downloaded and then Import. Import Popup: Regardless of the installation method a popup will appear prompting you to import the BlazerTech Character Management System into your project. Make sure all assets are selected and click the Import button. After Installtion Here's some things to do after installing the BlazerTech Character Management System: Play sample scenes - Go into the Samples folder and run some of the sample scenes to make sure everything is functioning properly. Create your own character type - make a new character type to use your own spritesheets or third party ones. Read More → Character Types Implement a character creation menu - Use the modular Character Creator System to create your own in-game character creation menu.. Read More → Character Creator Overview"
  },
  "docs/getting-started/quick-start.html": {
    "href": "docs/getting-started/quick-start.html",
    "title": "Quick Start Guide | BlazerTech Character Management System",
    "summary": "Quick Start Guide This guide should get you on your feet and teach you the basics of how to use the BlazerTech Character Management System. It's recommended to read through the Basic Concepts before reading the Quick Start Guide. Creating a Character Type If you only plan to use the built-in characters you can skip straight to Creating a Character Template This guide will show you how to create both Unified and Layered Characters. Create a Character Type Asset Right click the Project window and navigate to Create > BlazerTech > Character Management System and select either Layered Character Type or Unified Character Type. Tip Unsure which Character Type to create? Read more about the difference between them here You can name the asset whatever you'd like. Character Type Core Fields Three fields are required regardless of the Character Type you chose. Character Type ID: A unique identifier for this Character Type. Can be whatever you want as long as it's not the same as another Character Type. Base Spritesheet: The core spritesheet that contains all frames that characters of this type will include. All future characters will need to have a spritesheet that is the exact same size as the Base Spritesheet. The Base Spritesheet should be the character in it's most barebones state without any extra clothing, hair, accessories, etc. Set the Sprite Mode of the spritesheet to Multiple. This will let you slice the spritesheet into multiple sprites so each frame can be used individually. Read More → Base Spritesheet Character Controller: (Optional) If you choose to, you can create an Animator Controller and assign it to the Character Controller field. Animation clips in the Animator Controller should use sprites from the Base Spritesheet otherwise the character won't be displayed correctly when the character shader is applied. Later in this guide when you learn how to use your character you can have the Character Controller automatically applied when the character is used. Read More → Character Shader Read More → Character Controller No further setup is required for Unified Character Types. Layered Character Specific Setup Since Layered Characters are built of multiple layers, we need to define what those layers are. Create Layer Assets Each layer is represented as a separate scriptable object. To create a layer once again right click the Project window and navigate to Create > BlazerTech > Character Management System > Layered Character Type > Character Layer. A layer asset contains all spritesheets that can be used for that specific layer. These are called Layer Options. Read Character Layers to learn how to properly setup each layer and add Layer Options. Creating a Character Template Now that we have our character type created, we need an actual character. There are many ways to create a character from a Character Type but for this guide we'll be using the simplest one, a Character Template. You can think of a Character Template as a blueprint that lets you create a character from it later during runtime. Right click the Project window and navigate to Create > BlazerTech > Character Management System > Character Templates and select either Layered Character Template or Unified Character Template. Unified Character Template Setup A Unified Character Template requires 3 things A reference to the Unified Character Type it's meant to be used for. A name for the character when it gets created. A reference to the spritesheet of the character. This spritesheet should be the exact same size as the Base Spritesheet in the Character Type and contain the same animations. Sprite Mode should be set to Single since we won't be using it directly. it'll be passed to the Character Shader. Set the Filter Mode to Point (No Filter) Optionally set Compression to None (Generally not needed for pixel art) That's it! Now go to Character Usage to learn how to create a character from your template. Read Also → Unified Character Template Layered Character Template Setup A Layered Character Template requires a reference to the Layered Character Type it's meant to be used for. As well as a name for the character when it gets created. Once the Character Type has been set, a list of layers will appear. These are the same layers you setup in the Layered Character Type. Each entry in the list contains a dropdown allowing you to choose which layer option you want to use. And a search bar to narrow down the list if needed. Tip If the layers list is not correct for whatever reason, you can click the Recreate List button at the bottom to remake the list. This will reset all layer options you chose. Read Also → Layered Character Template Character Usage The easiest way to use a Unified or Layered Character is with a Character Loader component. If you're using a Unified Character Type add the Unified Character Template Loader component. If you're using a Layered Character Type add the Layered Character Template Loader component. Character Loader Fields The following fields are required for all Character Loaders. References Renderer Most commonly a Sprite Renderer component. The Character Shader will be applied to this renderer. Set Animator Controller (Bool) Toggles if the Character Controller from the Character Type should be used or not. Animator The Animator component to apply the Animator Controller set in the Character Type. Loading Settings Loading Mode Asynchronous - Loads the character in the background without freezing the game. The character may not be visible right away while it loads. Synchronous - Loads the character synchronously which freezes the game while loading. Load Character On Start (Bool) if toggled, the character will be loaded automatically when the Start method is called. If not toggled the character will have to be loaded by calling the GetAndShowCharacter() method. Character Template Reference At the bottom of the component is a field that says either: Unified Character Template Layered Character Template Depending on the Character Loader component you're using. Regardless, reference a Character Template in that field. This is the template that will be used when creating a character during runtime. Now play the game and if Load Character On Start is true then you'll see your character in-gama. Congrats! You now have your first working character!"
  },
  "docs/layered-character-type.html": {
    "href": "docs/layered-character-type.html",
    "title": "Layered Character Type | BlazerTech Character Management System",
    "summary": "Layered Character Type A layered character is made from multiple layers, these layers are stacked upon each other to form the final character. Ex: Body > Outfit > Hairstyle > Accessory - Each layer is added one by one in order. Creating a Layered Character Type to create a new layered character type right click the Project window and navigate to Create > BlazerTech > Character Management System > Layered Character Type. Setting up a Layered Character Type The following properties must be set: Property Type Description CharacterTypeID String A unique identifer BaseSpritesheet Sprite The default character spritesheet CharacterController RuntimeAnimatorController The Animator Controller used Setting up Character Layers At the bottom of your Layered Character Type is a list of Character Layers. Each layer is a Scriptable Object that contains all available options for that layer of your character. Refer to Character Layers for how to create and setup character layers."
  },
  "docs/limezu-modern-interiors-support.html": {
    "href": "docs/limezu-modern-interiors-support.html",
    "title": "LimeZu Modern Interiors Support | BlazerTech Character Management System",
    "summary": "LimeZu Modern Interiors Support Don't know who LimeZu is? Check him out here! He's an insanely talented and dedicated man. Fun fact, the BlazerTech Character Management System was originally planned to be a support tool for Modern Interiors. Then I got bigger ideas for it and it branched off into it's own thing. However because of that the Character Management System provides an easy implementation for the modular characters within Modern Interiors and Modern Farm. LimeZus characters are modular, meaning they're built of multiple layers that when put on top of each other form a finished character. This is exactly how Layered Characters work in the Character Management System. Follow the guide for setting up a Layered Character Type here to learn how to use LimeZus characters with the Character Management System"
  },
  "docs/unified-character-type.html": {
    "href": "docs/unified-character-type.html",
    "title": "Unified Character Type | BlazerTech Character Management System",
    "summary": "Unified Character Type A Unified Character is made of one single premade spritesheet which contains every animation of the character. Creating a Unified Character Type to create a new Unified character type right click the Project window and navigate to Create > BlazerTech > Character Management System > Unified Character Type. Setting up a Unified Character Type The following properties must be set: Property Type Description CharacterTypeID String A unique identifer BaseSpritesheet Sprite The default character spritesheet CharacterController RuntimeAnimatorController The Animator Controller used That's it! Once your Unified Character Type is all setup you can create a Unified Character Template to make characters from this Character Type. \uD83D\uDD17 Read More → Unified Character Templates"
  },
  "index.html": {
    "href": "index.html",
    "title": "| BlazerTech Character Management System",
    "summary": "Easily create, manage, and customize sprite based characters! A comprehensive framework designed to handle both modular & premade characters. Providing an easy solution to create, use, animate and save/load characters in your Unity projects. How It Works Every character is defined by it's character type which contains all animations and frames the character has and optionally an Animator Controller which can be setup however needed for your own project or use a preset to work with the included character movement and animation handler scripts. This approach means after the initial Character Type has been setup, creating new characters of that same type is as easy as adding the new spritesheet(s). If used, only a single Animator Controller is needed for all characters of the same Character Type. This removes the tedium of creating dozens of new Animator Controllers or Override Controllers for each new character. There are two types of Character Types. Layered Character Types: Contain up to 10 layers, each layer is a spritesheet. When a layered character is rendered all layers will be overlayed on top of each other in order to create the final character. Unified Character Types: Each character contains only one spritesheet containing the same animations required by the Layered Character Type. Top Features ✅ Runtime Customization - Modify characters anytime, even at runtime. ✅ Works with Any Sprite Based Characters - Seamlessly implement any pixel art characters. ✅ Ease of Use - Characters can be setup and used within minutes. ✅ Includes BlazerTech Modular Characters - Customizable characters with 4 layers (Body, Outfit, Hairstyle, Accessory). ✅ Prefab Based Character Creator UI Framework! - A customizable in-game Character Creation Menu System. ✅ Character Randomization - Layered characters can be randomly generated. Perfect for background NPCs. ✅ Modern Interiors - Full support for the modular layered characters contained within LimeZu's Modern Interiors Asset Pack. Get Started Check out the Getting Started Guide to begin Version 0.1.0"
  }
}